test/GLib/GArrayUse.pony:use "lib:glib-2.0"
test/GLib/GArrayUse.pony:// use @g_array_append_vals[GArrayT](array': GArrayT, data': Pointer[None] tag, len': U32)
test/GLib/GArrayUse.pony:// use @g_array_binary_search[I32](array': GArrayT, target': Pointer[None] tag, compare_func': GCompareFunc, out_match_index': Pointer[U32] tag)
test/GLib/GArrayUse.pony:// use @g_array_copy[GArrayT](array': GArrayT)
test/GLib/GArrayUse.pony:// use @g_array_free[Pointer[U8] tag](array': GArrayT, free_segment': I32)
test/GLib/GArrayUse.pony:// use @g_array_get_element_size[U32](array': GArrayT)
test/GLib/GArrayUse.pony:// use @g_array_insert_vals[GArrayT](array': GArrayT, index_': U32, data': Pointer[None] tag, len': U32)
test/GLib/GArrayUse.pony:// use @g_array_new[GArrayT](zero_terminated': I32, clear_': I32, element_size': U32)
test/GLib/GArrayUse.pony:// use @g_array_prepend_vals[GArrayT](array': GArrayT, data': Pointer[None] tag, len': U32)
test/GLib/GArrayUse.pony:// use @g_array_ref[GArrayT](array': GArrayT)
test/GLib/GArrayUse.pony:// use @g_array_remove_index[GArrayT](array': GArrayT, index_': U32)
test/GLib/GArrayUse.pony:// use @g_array_remove_index_fast[GArrayT](array': GArrayT, index_': U32)
test/GLib/GArrayUse.pony:// use @g_array_remove_range[GArrayT](array': GArrayT, index_': U32, length': U32)
test/GLib/GArrayUse.pony:// use @g_array_set_clear_func[None](array': GArrayT, clear_func': GDestroyNotify)
test/GLib/GArrayUse.pony:// use @g_array_set_size[GArrayT](array': GArrayT, length': U32)
test/GLib/GArrayUse.pony:// use @g_array_sized_new[GArrayT](zero_terminated': I32, clear_': I32, element_size': U32, reserved_size': U32)
test/GLib/GArrayUse.pony:// use @g_array_sort[None](array': GArrayT, compare_func': GCompareFunc)
test/GLib/GArrayUse.pony:// use @g_array_sort_with_data[None](array': GArrayT, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GArrayUse.pony:// use @g_array_steal[Pointer[None] tag](array': GArrayT, len': Pointer[U64] tag)
test/GLib/GArrayUse.pony:// use @g_array_unref[None](array': GArrayT)
test/GLib/GAsyncQueueUse.pony:use "lib:glib-2.0"
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_new[GAsyncQueueT]()
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_new_full[GAsyncQueueT](item_free_func': GDestroyNotify)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_length[I32](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_length_unlocked[I32](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_lock[None](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_pop[Pointer[None] tag](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_pop_unlocked[Pointer[None] tag](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_push[None](queue': GAsyncQueueT, data': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_push_front[None](queue': GAsyncQueueT, item': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_push_front_unlocked[None](queue': GAsyncQueueT, item': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_push_sorted[None](queue': GAsyncQueueT, data': Pointer[None] tag, func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_push_sorted_unlocked[None](queue': GAsyncQueueT, data': Pointer[None] tag, func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_push_unlocked[None](queue': GAsyncQueueT, data': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_ref[GAsyncQueueT](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_ref_unlocked[None](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_remove[I32](queue': GAsyncQueueT, item': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_remove_unlocked[I32](queue': GAsyncQueueT, item': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_sort[None](queue': GAsyncQueueT, func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_sort_unlocked[None](queue': GAsyncQueueT, func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_timed_pop[Pointer[None] tag](queue': GAsyncQueueT, end_time': GTimeValT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_timed_pop_unlocked[Pointer[None] tag](queue': GAsyncQueueT, end_time': GTimeValT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_timeout_pop[Pointer[None] tag](queue': GAsyncQueueT, timeout': U64)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_timeout_pop_unlocked[Pointer[None] tag](queue': GAsyncQueueT, timeout': U64)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_try_pop[Pointer[None] tag](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_try_pop_unlocked[Pointer[None] tag](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_unlock[None](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_unref[None](queue': GAsyncQueueT)
test/GLib/GAsyncQueueUse.pony:// use @g_async_queue_unref_and_unlock[None](queue': GAsyncQueueT)
test/GLib/GBookmarkFileUse.pony:use "lib:glib-2.0"
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_error_quark[U32]()
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_new[GBookmarkFileT]()
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_add_application[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, name': Pointer[U8] tag, exec': Pointer[U8] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_add_group[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, group': Pointer[U8] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_free[None](bookmark': GBookmarkFileT)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_added[I64](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_added_date_time[GDateTimeT](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_app_info[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, name': Pointer[U8] tag, exec': Pointer[Pointer[U8]] tag, count': Pointer[U32] tag, stamp': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_application_info[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, name': Pointer[U8] tag, exec': Pointer[Pointer[U8]] tag, count': Pointer[U32] tag, stamp': Pointer[GDateTimeT], error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_applications[Pointer[Pointer[U8]] tag](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, length': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_description[Pointer[U8] tag](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_groups[Pointer[Pointer[U8]] tag](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, length': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_icon[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, href': Pointer[Pointer[U8]] tag, mime_type': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_is_private[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_mime_type[Pointer[U8] tag](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_modified[I64](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_modified_date_time[GDateTimeT](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_size[I32](bookmark': GBookmarkFileT)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_title[Pointer[U8] tag](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_uris[Pointer[Pointer[U8]] tag](bookmark': GBookmarkFileT, length': Pointer[U64] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_visited[I64](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_get_visited_date_time[GDateTimeT](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_has_application[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, name': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_has_group[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, group': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_has_item[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_load_from_data[I32](bookmark': GBookmarkFileT, data': Pointer[U8] tag, length': U64, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_load_from_data_dirs[I32](bookmark': GBookmarkFileT, file': Pointer[U8] tag, full_path': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_load_from_file[I32](bookmark': GBookmarkFileT, filename': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_move_item[I32](bookmark': GBookmarkFileT, old_uri': Pointer[U8] tag, new_uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_remove_application[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, name': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_remove_group[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, group': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_remove_item[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_added[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, added': I64)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_added_date_time[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, added': GDateTimeT)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_app_info[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, name': Pointer[U8] tag, exec': Pointer[U8] tag, count': I32, stamp': I64, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_application_info[I32](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, name': Pointer[U8] tag, exec': Pointer[U8] tag, count': I32, stamp': GDateTimeT, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_description[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, description': Pointer[U8] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_groups[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, groups': Pointer[Pointer[U8]] tag, length': U64)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_icon[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, href': Pointer[U8] tag, mime_type': Pointer[U8] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_is_private[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, is_private': I32)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_mime_type[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, mime_type': Pointer[U8] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_modified[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, modified': I64)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_modified_date_time[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, modified': GDateTimeT)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_title[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, title': Pointer[U8] tag)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_visited[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, visited': I64)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_set_visited_date_time[None](bookmark': GBookmarkFileT, uri': Pointer[U8] tag, visited': GDateTimeT)
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_to_data[Pointer[U8] tag](bookmark': GBookmarkFileT, length': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GBookmarkFileUse.pony:// use @g_bookmark_file_to_file[I32](bookmark': GBookmarkFileT, filename': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GByteArrayUse.pony:use "lib:glib-2.0"
test/GLib/GByteArrayUse.pony:// use @g_byte_array_append[GByteArrayT](array': GByteArrayT, data': Pointer[U8] tag, len': U32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_free[Pointer[U8] tag](array': GByteArrayT, free_segment': I32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_free_to_bytes[GBytesT](array': GByteArrayT)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_new[GByteArrayT]()
test/GLib/GByteArrayUse.pony:// use @g_byte_array_new_take[GByteArrayT](data': Pointer[U8] tag, len': U64)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_prepend[GByteArrayT](array': GByteArrayT, data': Pointer[U8] tag, len': U32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_ref[GByteArrayT](array': GByteArrayT)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_remove_index[GByteArrayT](array': GByteArrayT, index_': U32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_remove_index_fast[GByteArrayT](array': GByteArrayT, index_': U32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_remove_range[GByteArrayT](array': GByteArrayT, index_': U32, length': U32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_set_size[GByteArrayT](array': GByteArrayT, length': U32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_sized_new[GByteArrayT](reserved_size': U32)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_sort[None](array': GByteArrayT, compare_func': GCompareFunc)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_sort_with_data[None](array': GByteArrayT, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_steal[Pointer[U8] tag](array': GByteArrayT, len': Pointer[U64] tag)
test/GLib/GByteArrayUse.pony:// use @g_byte_array_unref[None](array': GByteArrayT)
test/GLib/GBytesUse.pony:use "lib:glib-2.0"
test/GLib/GBytesUse.pony:// use @g_bytes_new[GBytesT](data': Pointer[None] tag, size': U64)
test/GLib/GBytesUse.pony:// use @g_bytes_new_static[GBytesT](data': Pointer[None] tag, size': U64)
test/GLib/GBytesUse.pony:// use @g_bytes_new_take[GBytesT](data': Pointer[None] tag, size': U64)
test/GLib/GBytesUse.pony:// use @g_bytes_new_with_free_func[GBytesT](data': Pointer[None] tag, size': U64, free_func': GDestroyNotify, user_data': Pointer[None] tag)
test/GLib/GBytesUse.pony:// use @g_bytes_compare[I32](bytes1': Pointer[None] tag, bytes2': Pointer[None] tag)
test/GLib/GBytesUse.pony:// use @g_bytes_equal[I32](bytes1': Pointer[None] tag, bytes2': Pointer[None] tag)
test/GLib/GBytesUse.pony:// use @g_bytes_get_data[Pointer[None] tag](bytes': GBytesT, size': Pointer[U64] tag)
test/GLib/GBytesUse.pony:// use @g_bytes_get_size[U64](bytes': GBytesT)
test/GLib/GBytesUse.pony:// use @g_bytes_hash[U32](bytes': Pointer[None] tag)
test/GLib/GBytesUse.pony:// use @g_bytes_new_from_bytes[GBytesT](bytes': GBytesT, offset': U64, length': U64)
test/GLib/GBytesUse.pony:// use @g_bytes_ref[GBytesT](bytes': GBytesT)
test/GLib/GBytesUse.pony:// use @g_bytes_unref[None](bytes': GBytesT)
test/GLib/GBytesUse.pony:// use @g_bytes_unref_to_array[GByteArrayT](bytes': GBytesT)
test/GLib/GBytesUse.pony:// use @g_bytes_unref_to_data[Pointer[None] tag](bytes': GBytesT, size': Pointer[U64] tag)
test/GLib/GDataUse.pony:use "lib:glib-2.0"
test/GLib/GDateTimeUse.pony:use "lib:glib-2.0"
test/GLib/GDateTimeUse.pony:// use @g_date_time_new[GDateTimeT](tz': GTimeZoneT, year': I32, month': I32, day': I32, hour': I32, minute': I32, seconds': F64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_from_iso8601[GDateTimeT](text': Pointer[U8] tag, default_tz': GTimeZoneT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_from_timeval_local[GDateTimeT](tv': GTimeValT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_from_timeval_utc[GDateTimeT](tv': GTimeValT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_from_unix_local[GDateTimeT](t': I64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_from_unix_utc[GDateTimeT](t': I64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_local[GDateTimeT](year': I32, month': I32, day': I32, hour': I32, minute': I32, seconds': F64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_now[GDateTimeT](tz': GTimeZoneT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_now_local[GDateTimeT]()
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_now_utc[GDateTimeT]()
test/GLib/GDateTimeUse.pony:// use @g_date_time_new_utc[GDateTimeT](year': I32, month': I32, day': I32, hour': I32, minute': I32, seconds': F64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add[GDateTimeT](datetime': GDateTimeT, timespan': I64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_days[GDateTimeT](datetime': GDateTimeT, days': I32)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_full[GDateTimeT](datetime': GDateTimeT, years': I32, months': I32, days': I32, hours': I32, minutes': I32, seconds': F64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_hours[GDateTimeT](datetime': GDateTimeT, hours': I32)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_minutes[GDateTimeT](datetime': GDateTimeT, minutes': I32)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_months[GDateTimeT](datetime': GDateTimeT, months': I32)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_seconds[GDateTimeT](datetime': GDateTimeT, seconds': F64)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_weeks[GDateTimeT](datetime': GDateTimeT, weeks': I32)
test/GLib/GDateTimeUse.pony:// use @g_date_time_add_years[GDateTimeT](datetime': GDateTimeT, years': I32)
test/GLib/GDateTimeUse.pony:// use @g_date_time_compare[I32](dt1': Pointer[None] tag, dt2': Pointer[None] tag)
test/GLib/GDateTimeUse.pony:// use @g_date_time_difference[I64](end': GDateTimeT, begin': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_equal[I32](dt1': Pointer[None] tag, dt2': Pointer[None] tag)
test/GLib/GDateTimeUse.pony:// use @g_date_time_format[Pointer[U8] tag](datetime': GDateTimeT, format': Pointer[U8] tag)
test/GLib/GDateTimeUse.pony:// use @g_date_time_format_iso8601[Pointer[U8] tag](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_day_of_month[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_day_of_week[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_day_of_year[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_hour[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_microsecond[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_minute[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_month[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_second[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_seconds[F64](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_timezone[GTimeZoneT](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_timezone_abbreviation[Pointer[U8] tag](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_utc_offset[I64](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_week_numbering_year[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_week_of_year[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_year[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_get_ymd[None](datetime': GDateTimeT, year': Pointer[I32] tag, month': Pointer[I32] tag, day': Pointer[I32] tag)
test/GLib/GDateTimeUse.pony:// use @g_date_time_hash[U32](datetime': Pointer[None] tag)
test/GLib/GDateTimeUse.pony:// use @g_date_time_is_daylight_savings[I32](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_ref[GDateTimeT](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_to_local[GDateTimeT](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_to_timeval[I32](datetime': GDateTimeT, tv': GTimeValT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_to_timezone[GDateTimeT](datetime': GDateTimeT, tz': GTimeZoneT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_to_unix[I64](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_to_utc[GDateTimeT](datetime': GDateTimeT)
test/GLib/GDateTimeUse.pony:// use @g_date_time_unref[None](datetime': GDateTimeT)
test/GLib/GDateUse.pony:use "lib:glib-2.0"
test/GLib/GDateUse.pony:// use @g_date_get_days_in_month[U8](month': U32, year': U16)
test/GLib/GDateUse.pony:// use @g_date_get_monday_weeks_in_year[U8](year': U16)
test/GLib/GDateUse.pony:// use @g_date_get_sunday_weeks_in_year[U8](year': U16)
test/GLib/GDateUse.pony:// use @g_date_is_leap_year[I32](year': U16)
test/GLib/GDateUse.pony:// use @g_date_strftime[U64](s': Pointer[U8] tag, slen': U64, format': Pointer[U8] tag, date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_valid_day[I32](day': U8)
test/GLib/GDateUse.pony:// use @g_date_valid_dmy[I32](day': U8, month': U32, year': U16)
test/GLib/GDateUse.pony:// use @g_date_valid_julian[I32](julian_date': U32)
test/GLib/GDateUse.pony:// use @g_date_valid_month[I32](month': U32)
test/GLib/GDateUse.pony:// use @g_date_valid_weekday[I32](weekday': U32)
test/GLib/GDateUse.pony:// use @g_date_valid_year[I32](year': U16)
test/GLib/GDateUse.pony:// use @g_date_new[GDateT]()
test/GLib/GDateUse.pony:// use @g_date_new_dmy[GDateT](day': U8, month': U32, year': U16)
test/GLib/GDateUse.pony:// use @g_date_new_julian[GDateT](julian_day': U32)
test/GLib/GDateUse.pony:// use @g_date_add_days[None](date': GDateT, n_days': U32)
test/GLib/GDateUse.pony:// use @g_date_add_months[None](date': GDateT, n_months': U32)
test/GLib/GDateUse.pony:// use @g_date_add_years[None](date': GDateT, n_years': U32)
test/GLib/GDateUse.pony:// use @g_date_clamp[None](date': GDateT, min_date': GDateT, max_date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_clear[None](date': GDateT, n_dates': U32)
test/GLib/GDateUse.pony:// use @g_date_compare[I32](lhs': GDateT, rhs': GDateT)
test/GLib/GDateUse.pony:// use @g_date_copy[GDateT](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_days_between[I32](date1': GDateT, date2': GDateT)
test/GLib/GDateUse.pony:// use @g_date_free[None](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_day[U8](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_day_of_year[U32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_iso8601_week_of_year[U32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_julian[U32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_monday_week_of_year[U32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_month[U32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_sunday_week_of_year[U32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_weekday[U32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_get_year[U16](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_is_first_of_month[I32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_is_last_of_month[I32](date': GDateT)
test/GLib/GDateUse.pony:// use @g_date_order[None](date1': GDateT, date2': GDateT)
test/GLib/GDateUse.pony:// use @g_date_set_day[None](date': GDateT, day': U8)
test/GLib/GDateUse.pony:// use @g_date_set_dmy[None](date': GDateT, day': U8, month': U32, y': U16)
test/GLib/GDateUse.pony:// use @g_date_set_julian[None](date': GDateT, julian_date': U32)
test/GLib/GDateUse.pony:// use @g_date_set_month[None](date': GDateT, month': U32)
test/GLib/GDateUse.pony:// use @g_date_set_parse[None](date': GDateT, str': Pointer[U8] tag)
test/GLib/GDateUse.pony:// use @g_date_set_time[None](date': GDateT, time_': I32)
test/GLib/GDateUse.pony:// use @g_date_set_time_t[None](date': GDateT, timet': I64)
test/GLib/GDateUse.pony:// use @g_date_set_time_val[None](date': GDateT, timeval': GTimeValT)
test/GLib/GDateUse.pony:// use @g_date_set_year[None](date': GDateT, year': U16)
test/GLib/GDateUse.pony:// use @g_date_subtract_days[None](date': GDateT, n_days': U32)
test/GLib/GDateUse.pony:// use @g_date_subtract_months[None](date': GDateT, n_months': U32)
test/GLib/GDateUse.pony:// use @g_date_subtract_years[None](date': GDateT, n_years': U32)
test/GLib/GDateUse.pony:// use @g_date_to_struct_tm[None](date': GDateT, tm': tmT)
test/GLib/GDateUse.pony:// use @g_date_valid[I32](date': GDateT)
test/GLib/GDebugKeyUse.pony:use "lib:glib-2.0"
test/GLib/GDirUse.pony:use "lib:glib-2.0"
test/GLib/GDirUse.pony:// use @g_dir_make_tmp[Pointer[U8] tag](tmpl': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GDirUse.pony:// use @g_dir_open[GDirT](path': Pointer[U8] tag, flags': U32, error': Pointer[GErrorT])
test/GLib/GDirUse.pony:// use @g_dir_close[None](dir': GDirT)
test/GLib/GDirUse.pony:// use @g_dir_read_name[Pointer[U8] tag](dir': GDirT)
test/GLib/GDirUse.pony:// use @g_dir_rewind[None](dir': GDirT)
test/GLib/GErrorUse.pony:use "lib:glib-2.0"
test/GLib/GErrorUse.pony:// use @g_error_new[GErrorT](domain': U32, code': I32, format': Pointer[U8] tag, ...)
test/GLib/GErrorUse.pony:// use @g_error_new_literal[GErrorT](domain': U32, code': I32, message': Pointer[U8] tag)
test/GLib/GErrorUse.pony:// use @g_error_new_valist[GErrorT](domain': U32, code': I32, format': Pointer[U8] tag, args': valisttagT)
test/GLib/GErrorUse.pony:// use @g_error_copy[GErrorT](error': GErrorT)
test/GLib/GErrorUse.pony:// use @g_error_free[None](error': GErrorT)
test/GLib/GErrorUse.pony:// use @g_error_matches[I32](error': GErrorT, domain': U32, code': I32)
test/GLib/GHashTableIterUse.pony:use "lib:glib-2.0"
test/GLib/GHashTableIterUse.pony:// use @g_hash_table_iter_get_hash_table[GHashTableT](iter': GHashTableIterT)
test/GLib/GHashTableIterUse.pony:// use @g_hash_table_iter_init[None](iter': GHashTableIterT, hash_table': GHashTableT)
test/GLib/GHashTableIterUse.pony:// use @g_hash_table_iter_next[I32](iter': GHashTableIterT, key': Pointer[Pointer[None]] tag, value': Pointer[Pointer[None]] tag)
test/GLib/GHashTableIterUse.pony:// use @g_hash_table_iter_remove[None](iter': GHashTableIterT)
test/GLib/GHashTableIterUse.pony:// use @g_hash_table_iter_replace[None](iter': GHashTableIterT, value': Pointer[None] tag)
test/GLib/GHashTableIterUse.pony:// use @g_hash_table_iter_steal[None](iter': GHashTableIterT)
test/GLib/GHashTableUse.pony:use "lib:glib-2.0"
test/GLib/GHashTableUse.pony:// use @g_hash_table_add[I32](hash_table': GHashTableT, key': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_contains[I32](hash_table': GHashTableT, key': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_destroy[None](hash_table': GHashTableT)
test/GLib/GHashTableUse.pony:// use @g_hash_table_find[Pointer[None] tag](hash_table': GHashTableT, predicate': GHRFunc, user_data': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_foreach[None](hash_table': GHashTableT, func': GHFunc, user_data': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_foreach_remove[U32](hash_table': GHashTableT, func': GHRFunc, user_data': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_foreach_steal[U32](hash_table': GHashTableT, func': GHRFunc, user_data': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_get_keys[GListT](hash_table': GHashTableT)
test/GLib/GHashTableUse.pony:// use @g_hash_table_get_keys_as_array[Pointer[Pointer[None]] tag](hash_table': GHashTableT, length': Pointer[U32] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_get_values[GListT](hash_table': GHashTableT)
test/GLib/GHashTableUse.pony:// use @g_hash_table_insert[I32](hash_table': GHashTableT, key': Pointer[None] tag, value': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_lookup[Pointer[None] tag](hash_table': GHashTableT, key': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_lookup_extended[I32](hash_table': GHashTableT, lookup_key': Pointer[None] tag, orig_key': Pointer[Pointer[None]] tag, value': Pointer[Pointer[None]] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_new[GHashTableT](hash_func': GHashFunc, key_equal_func': GEqualFunc)
test/GLib/GHashTableUse.pony:// use @g_hash_table_new_full[GHashTableT](hash_func': GHashFunc, key_equal_func': GEqualFunc, key_destroy_func': GDestroyNotify, value_destroy_func': GDestroyNotify)
test/GLib/GHashTableUse.pony:// use @g_hash_table_ref[GHashTableT](hash_table': GHashTableT)
test/GLib/GHashTableUse.pony:// use @g_hash_table_remove[I32](hash_table': GHashTableT, key': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_remove_all[None](hash_table': GHashTableT)
test/GLib/GHashTableUse.pony:// use @g_hash_table_replace[I32](hash_table': GHashTableT, key': Pointer[None] tag, value': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_size[U32](hash_table': GHashTableT)
test/GLib/GHashTableUse.pony:// use @g_hash_table_steal[I32](hash_table': GHashTableT, key': Pointer[None] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_steal_all[None](hash_table': GHashTableT)
test/GLib/GHashTableUse.pony:// use @g_hash_table_steal_extended[I32](hash_table': GHashTableT, lookup_key': Pointer[None] tag, stolen_key': Pointer[Pointer[None]] tag, stolen_value': Pointer[Pointer[None]] tag)
test/GLib/GHashTableUse.pony:// use @g_hash_table_unref[None](hash_table': GHashTableT)
test/GLib/GHmacUse.pony:use "lib:glib-2.0"
test/GLib/GHmacUse.pony:// use @g_hmac_new[GHmacT](digest_type': U32, key': Pointer[U8] tag, key_len': U64)
test/GLib/GHmacUse.pony:// use @g_hmac_copy[GHmacT](hmac': GHmacT)
test/GLib/GHmacUse.pony:// use @g_hmac_get_digest[None](hmac': GHmacT, buffer': Pointer[U8] tag, digest_len': Pointer[U64] tag)
test/GLib/GHmacUse.pony:// use @g_hmac_get_string[Pointer[U8] tag](hmac': GHmacT)
test/GLib/GHmacUse.pony:// use @g_hmac_ref[GHmacT](hmac': GHmacT)
test/GLib/GHmacUse.pony:// use @g_hmac_unref[None](hmac': GHmacT)
test/GLib/GHmacUse.pony:// use @g_hmac_update[None](hmac': GHmacT, data': Pointer[U8] tag, length': I64)
test/GLib/GLibNSUse.pony:use "lib:glib-2.0"
test/GLib/GLibNSUse.pony:// use @g_ascii_digit_value[I32](c': U8)
test/GLib/GLibNSUse.pony:// use @g_ascii_dtostr[Pointer[U8] tag](buffer': Pointer[U8] tag, buf_len': I32, d': F64)
test/GLib/GLibNSUse.pony:// use @g_ascii_formatd[Pointer[U8] tag](buffer': Pointer[U8] tag, buf_len': I32, format': Pointer[U8] tag, d': F64)
test/GLib/GLibNSUse.pony:// use @g_ascii_strcasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_ascii_strdown[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_ascii_string_to_signed[I32](str': Pointer[U8] tag, base': U32, min': I64, max': I64, out_num': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_ascii_string_to_unsigned[I32](str': Pointer[U8] tag, base': U32, min': U64, max': U64, out_num': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_ascii_strncasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag, n': U64)
test/GLib/GLibNSUse.pony:// use @g_ascii_strtod[F64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_ascii_strtoll[I64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag, base': U32)
test/GLib/GLibNSUse.pony:// use @g_ascii_strtoull[U64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag, base': U32)
test/GLib/GLibNSUse.pony:// use @g_ascii_strup[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_ascii_tolower[U8](c': U8)
test/GLib/GLibNSUse.pony:// use @g_ascii_toupper[U8](c': U8)
test/GLib/GLibNSUse.pony:// use @g_ascii_xdigit_value[I32](c': U8)
test/GLib/GLibNSUse.pony:// use @g_assert_warning[None](log_domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, pretty_function': Pointer[U8] tag, expression': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_assertion_message[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, message': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_assertion_message_cmpnum[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag, arg1': I128, cmp': Pointer[U8] tag, arg2': I128, numtype': U8)
test/GLib/GLibNSUse.pony:// use @g_assertion_message_cmpstr[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag, arg1': Pointer[U8] tag, cmp': Pointer[U8] tag, arg2': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_assertion_message_error[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag, error': GErrorT, error_domain': U32, error_code': I32)
test/GLib/GLibNSUse.pony:// use @g_assertion_message_expr[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_atexit[None](func': GVoidFunc)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_add[I32](atomic': Pointer[I32] tag, val': I32)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_and[U32](atomic': Pointer[U32] tag, val': U32)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_compare_and_exchange[I32](atomic': Pointer[I32] tag, oldval': I32, newval': I32)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_dec_and_test[I32](atomic': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_exchange_and_add[I32](atomic': Pointer[I32] tag, val': I32)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_get[I32](atomic': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_inc[None](atomic': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_or[U32](atomic': Pointer[U32] tag, val': U32)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_set[None](atomic': Pointer[I32] tag, newval': I32)
test/GLib/GLibNSUse.pony:// use @g_atomic_int_xor[U32](atomic': Pointer[U32] tag, val': U32)
test/GLib/GLibNSUse.pony:// use @g_atomic_pointer_add[I64](atomic': Pointer[None] tag, val': I64)
test/GLib/GLibNSUse.pony:// use @g_atomic_pointer_and[U64](atomic': Pointer[None] tag, val': U64)
test/GLib/GLibNSUse.pony:// use @g_atomic_pointer_compare_and_exchange[I32](atomic': Pointer[None] tag, oldval': Pointer[None] tag, newval': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_pointer_get[Pointer[None] tag](atomic': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_pointer_or[U64](atomic': Pointer[None] tag, val': U64)
test/GLib/GLibNSUse.pony:// use @g_atomic_pointer_set[None](atomic': Pointer[None] tag, newval': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_pointer_xor[U64](atomic': Pointer[None] tag, val': U64)
test/GLib/GLibNSUse.pony:// use @g_atomic_rc_box_acquire[Pointer[None] tag](mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_rc_box_alloc[Pointer[None] tag](block_size': U64)
test/GLib/GLibNSUse.pony:// use @g_atomic_rc_box_alloc0[Pointer[None] tag](block_size': U64)
test/GLib/GLibNSUse.pony:// use @g_atomic_rc_box_dup[Pointer[None] tag](block_size': U64, mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_rc_box_get_size[U64](mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_rc_box_release[None](mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_rc_box_release_full[None](mem_block': Pointer[None] tag, clear_func': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_atomic_ref_count_compare[I32](arc': Pointer[I32] tag, val': I32)
test/GLib/GLibNSUse.pony:// use @g_atomic_ref_count_dec[I32](arc': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_ref_count_inc[None](arc': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_atomic_ref_count_init[None](arc': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_base64_decode[Pointer[U8] tag](text': Pointer[U8] tag, out_len': Pointer[U64] tag)
test/GLib/GLibNSUse.pony:// use @g_base64_decode_inplace[Pointer[U8] tag](text': Pointer[U8] tag, out_len': Pointer[U64] tag)
test/GLib/GLibNSUse.pony:// use @g_base64_decode_step[U64](in': Pointer[U8] tag, len': U64, out': Pointer[U8] tag, state': Pointer[I32] tag, save': Pointer[U32] tag)
test/GLib/GLibNSUse.pony:// use @g_base64_encode[Pointer[U8] tag](data': Pointer[U8] tag, len': U64)
test/GLib/GLibNSUse.pony:// use @g_base64_encode_close[U64](break_lines': I32, out': Pointer[U8] tag, state': Pointer[I32] tag, save': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_base64_encode_step[U64](in': Pointer[U8] tag, len': U64, break_lines': I32, out': Pointer[U8] tag, state': Pointer[I32] tag, save': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_basename[Pointer[U8] tag](file_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_bit_lock[None](address': Pointer[I32] tag, lock_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_bit_nth_lsf[I32](mask': U64, nth_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_bit_nth_msf[I32](mask': U64, nth_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_bit_storage[U32](number': U64)
test/GLib/GLibNSUse.pony:// use @g_bit_trylock[I32](address': Pointer[I32] tag, lock_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_bit_unlock[None](address': Pointer[I32] tag, lock_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_build_filename[Pointer[U8] tag](first_element': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_build_filenamev[Pointer[U8] tag](args': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_build_path[Pointer[U8] tag](separator': Pointer[U8] tag, first_element': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_build_pathv[Pointer[U8] tag](separator': Pointer[U8] tag, args': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_canonicalize_filename[Pointer[U8] tag](filename': Pointer[U8] tag, relative_to': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @glib_check_version[Pointer[U8] tag](required_major': U32, required_minor': U32, required_micro': U32)
test/GLib/GLibNSUse.pony:// use @g_child_watch_add[U32](pid': I32, function': GChildWatchFunc, data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_child_watch_add_full[U32](priority': I32, pid': I32, function': GChildWatchFunc, data': Pointer[None] tag, notify': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_child_watch_source_new[GSourceT](pid': I32)
test/GLib/GLibNSUse.pony:// use @g_clear_error[None](err': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_clear_handle_id[None](tag_ptr': Pointer[U32] tag, clear_func': GClearHandleFunc)
test/GLib/GLibNSUse.pony:// use @g_clear_list[None](list_ptr': Pointer[GListT], destroy': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_clear_pointer[None](pp': Pointer[Pointer[None]] tag, destroy': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_clear_slist[None](slist_ptr': Pointer[GSListT], destroy': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_compute_checksum_for_bytes[Pointer[U8] tag](checksum_type': U32, data': GBytesT)
test/GLib/GLibNSUse.pony:// use @g_compute_checksum_for_data[Pointer[U8] tag](checksum_type': U32, data': Pointer[U8] tag, length': U64)
test/GLib/GLibNSUse.pony:// use @g_compute_checksum_for_string[Pointer[U8] tag](checksum_type': U32, str': Pointer[U8] tag, length': I64)
test/GLib/GLibNSUse.pony:// use @g_compute_hmac_for_bytes[Pointer[U8] tag](digest_type': U32, key': GBytesT, data': GBytesT)
test/GLib/GLibNSUse.pony:// use @g_compute_hmac_for_data[Pointer[U8] tag](digest_type': U32, key': Pointer[U8] tag, key_len': U64, data': Pointer[U8] tag, length': U64)
test/GLib/GLibNSUse.pony:// use @g_compute_hmac_for_string[Pointer[U8] tag](digest_type': U32, key': Pointer[U8] tag, key_len': U64, str': Pointer[U8] tag, length': I64)
test/GLib/GLibNSUse.pony:// use @g_convert[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, to_codeset': Pointer[U8] tag, from_codeset': Pointer[U8] tag, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_convert_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_convert_with_fallback[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, to_codeset': Pointer[U8] tag, from_codeset': Pointer[U8] tag, fallback': Pointer[U8] tag, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_convert_with_iconv[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, converter': GIConvT, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_datalist_clear[None](datalist': Pointer[GDataT])
test/GLib/GLibNSUse.pony:// use @g_datalist_foreach[None](datalist': Pointer[GDataT], func': GDataForeachFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_datalist_get_data[Pointer[None] tag](datalist': Pointer[GDataT], key': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_datalist_get_flags[U32](datalist': Pointer[GDataT])
test/GLib/GLibNSUse.pony:// use @g_datalist_id_dup_data[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32, dup_func': GDuplicateFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_datalist_id_get_data[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32)
test/GLib/GLibNSUse.pony:// use @g_datalist_id_remove_no_notify[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32)
test/GLib/GLibNSUse.pony:// use @g_datalist_id_set_data_full[None](datalist': Pointer[GDataT], key_id': U32, data': Pointer[None] tag, destroy_func': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_datalist_init[None](datalist': Pointer[GDataT])
test/GLib/GLibNSUse.pony:// use @g_datalist_set_flags[None](datalist': Pointer[GDataT], flags': U32)
test/GLib/GLibNSUse.pony:// use @g_datalist_unset_flags[None](datalist': Pointer[GDataT], flags': U32)
test/GLib/GLibNSUse.pony:// use @g_dataset_destroy[None](dataset_location': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_dataset_foreach[None](dataset_location': Pointer[None] tag, func': GDataForeachFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_dataset_id_get_data[Pointer[None] tag](dataset_location': Pointer[None] tag, key_id': U32)
test/GLib/GLibNSUse.pony:// use @g_dataset_id_remove_no_notify[Pointer[None] tag](dataset_location': Pointer[None] tag, key_id': U32)
test/GLib/GLibNSUse.pony:// use @g_dataset_id_set_data_full[None](dataset_location': Pointer[None] tag, key_id': U32, data': Pointer[None] tag, destroy_func': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_dcgettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgid': Pointer[U8] tag, category': I32)
test/GLib/GLibNSUse.pony:// use @g_dgettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgid': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_direct_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_direct_hash[U32](v': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_dngettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgid': Pointer[U8] tag, msgid_plural': Pointer[U8] tag, n': U64)
test/GLib/GLibNSUse.pony:// use @g_double_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_double_hash[U32](v': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_dpgettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgctxtid': Pointer[U8] tag, msgidoffset': U64)
test/GLib/GLibNSUse.pony:// use @g_dpgettext2[Pointer[U8] tag](domain': Pointer[U8] tag, context': Pointer[U8] tag, msgid': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_environ_getenv[Pointer[U8] tag](envp': Pointer[Pointer[U8]] tag, variable': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_environ_setenv[Pointer[Pointer[U8]] tag](envp': Pointer[Pointer[U8]] tag, variable': Pointer[U8] tag, value': Pointer[U8] tag, overwrite': I32)
test/GLib/GLibNSUse.pony:// use @g_environ_unsetenv[Pointer[Pointer[U8]] tag](envp': Pointer[Pointer[U8]] tag, variable': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_file_error_from_errno[U32](err_no': I32)
test/GLib/GLibNSUse.pony:// use @g_file_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_file_get_contents[I32](filename': Pointer[U8] tag, contents': Pointer[Pointer[U8]] tag, length': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_file_open_tmp[I32](tmpl': Pointer[U8] tag, name_used': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_file_read_link[Pointer[U8] tag](filename': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_file_set_contents[I32](filename': Pointer[U8] tag, contents': Pointer[U8] tag, length': I64, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_file_set_contents_full[I32](filename': Pointer[U8] tag, contents': Pointer[U8] tag, length': I64, flags': U32, mode': I32, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_file_test[I32](filename': Pointer[U8] tag, test': U32)
test/GLib/GLibNSUse.pony:// use @g_filename_display_basename[Pointer[U8] tag](filename': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_filename_display_name[Pointer[U8] tag](filename': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_filename_from_uri[Pointer[U8] tag](uri': Pointer[U8] tag, hostname': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_filename_from_utf8[Pointer[U8] tag](utf8string': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_filename_to_uri[Pointer[U8] tag](filename': Pointer[U8] tag, hostname': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_filename_to_utf8[Pointer[U8] tag](opsysstring': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_find_program_in_path[Pointer[U8] tag](program': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_format_size[Pointer[U8] tag](size': U64)
test/GLib/GLibNSUse.pony:// use @g_format_size_for_display[Pointer[U8] tag](size': I64)
test/GLib/GLibNSUse.pony:// use @g_format_size_full[Pointer[U8] tag](size': U64, flags': U32)
test/GLib/GLibNSUse.pony:// use @g_free[None](mem': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_get_application_name[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_charset[I32](charset': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_get_codeset[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_console_charset[I32](charset': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_get_current_dir[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_current_time[None](result': GTimeValT)
test/GLib/GLibNSUse.pony:// use @g_get_environ[Pointer[Pointer[U8]] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_filename_charsets[I32](filename_charsets': Pointer[Pointer[Pointer[U8]]] tag)
test/GLib/GLibNSUse.pony:// use @g_get_home_dir[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_host_name[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_language_names[Pointer[Pointer[U8]] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_language_names_with_category[Pointer[Pointer[U8]] tag](category_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_get_locale_variants[Pointer[Pointer[U8]] tag](locale': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_get_monotonic_time[I64]()
test/GLib/GLibNSUse.pony:// use @g_get_num_processors[U32]()
test/GLib/GLibNSUse.pony:// use @g_get_os_info[Pointer[U8] tag](key_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_get_prgname[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_real_name[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_real_time[I64]()
test/GLib/GLibNSUse.pony:// use @g_get_system_config_dirs[Pointer[Pointer[U8]] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_system_data_dirs[Pointer[Pointer[U8]] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_tmp_dir[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_user_cache_dir[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_user_config_dir[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_user_data_dir[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_user_name[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_user_runtime_dir[Pointer[U8] tag]()
test/GLib/GLibNSUse.pony:// use @g_get_user_special_dir[Pointer[U8] tag](directory': U32)
test/GLib/GLibNSUse.pony:// use @g_getenv[Pointer[U8] tag](variable': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_hostname_is_ascii_encoded[I32](hostname': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_hostname_is_ip_address[I32](hostname': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_hostname_is_non_ascii[I32](hostname': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_hostname_to_ascii[Pointer[U8] tag](hostname': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_hostname_to_unicode[Pointer[U8] tag](hostname': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_iconv[U64](converter': GIConvT, inbuf': Pointer[Pointer[U8]] tag, inbytes_left': Pointer[U64] tag, outbuf': Pointer[Pointer[U8]] tag, outbytes_left': Pointer[U64] tag)
test/GLib/GLibNSUse.pony:// use @g_idle_add[U32](function': GSourceFunc, data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_idle_add_full[U32](priority': I32, function': GSourceFunc, data': Pointer[None] tag, notify': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_idle_remove_by_data[I32](data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_idle_source_new[GSourceT]()
test/GLib/GLibNSUse.pony:// use @g_int64_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_int64_hash[U32](v': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_int_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_int_hash[U32](v': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_intern_static_string[Pointer[U8] tag](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_intern_string[Pointer[U8] tag](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_io_add_watch[U32](channel': GIOChannelT, condition': U32, func': GIOFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_io_add_watch_full[U32](channel': GIOChannelT, priority': I32, condition': U32, func': GIOFunc, user_data': Pointer[None] tag, notify': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_io_create_watch[GSourceT](channel': GIOChannelT, condition': U32)
test/GLib/GLibNSUse.pony:// use @g_listenv[Pointer[Pointer[U8]] tag]()
test/GLib/GLibNSUse.pony:// use @g_locale_from_utf8[Pointer[U8] tag](utf8string': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_locale_to_utf8[Pointer[U8] tag](opsysstring': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_log[None](log_domain': Pointer[U8] tag, log_level': I32, format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_log_default_handler[None](log_domain': Pointer[U8] tag, log_level': I32, message': Pointer[U8] tag, unused_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_log_remove_handler[None](log_domain': Pointer[U8] tag, handler_id': U32)
test/GLib/GLibNSUse.pony:// use @g_log_set_always_fatal[I32](fatal_mask': I32)
test/GLib/GLibNSUse.pony:// use @g_log_set_default_handler[GLogFunc](log_func': GLogFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_log_set_fatal_mask[I32](log_domain': Pointer[U8] tag, fatal_mask': I32)
test/GLib/GLibNSUse.pony:// use @g_log_set_handler[U32](log_domain': Pointer[U8] tag, log_levels': I32, log_func': GLogFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_log_set_handler_full[U32](log_domain': Pointer[U8] tag, log_levels': I32, log_func': GLogFunc, user_data': Pointer[None] tag, destroy': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_log_set_writer_func[None](func': GLogWriterFunc, user_data': Pointer[None] tag, user_data_free': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_log_structured[None](log_domain': Pointer[U8] tag, log_level': I32, ...)
test/GLib/GLibNSUse.pony:// use @g_log_structured_array[None](log_level': I32, fields': GLogFieldT, n_fields': U64)
test/GLib/GLibNSUse.pony:// use @g_log_structured_standard[None](log_domain': Pointer[U8] tag, log_level': I32, file': Pointer[U8] tag, line': Pointer[U8] tag, func': Pointer[U8] tag, message_format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_log_variant[None](log_domain': Pointer[U8] tag, log_level': I32, fields': GVariantT)
test/GLib/GLibNSUse.pony:// use @g_log_writer_default[U32](log_level': I32, fields': GLogFieldT, n_fields': U64, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_log_writer_format_fields[Pointer[U8] tag](log_level': I32, fields': GLogFieldT, n_fields': U64, use_color': I32)
test/GLib/GLibNSUse.pony:// use @g_log_writer_is_journald[I32](output_fd': I32)
test/GLib/GLibNSUse.pony:// use @g_log_writer_journald[U32](log_level': I32, fields': GLogFieldT, n_fields': U64, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_log_writer_standard_streams[U32](log_level': I32, fields': GLogFieldT, n_fields': U64, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_log_writer_supports_color[I32](output_fd': I32)
test/GLib/GLibNSUse.pony:// use @g_logv[None](log_domain': Pointer[U8] tag, log_level': I32, format': Pointer[U8] tag, args': valisttagT)
test/GLib/GLibNSUse.pony:// use @g_main_current_source[GSourceT]()
test/GLib/GLibNSUse.pony:// use @g_main_depth[I32]()
test/GLib/GLibNSUse.pony:// use @g_malloc[Pointer[None] tag](n_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_malloc0[Pointer[None] tag](n_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_malloc0_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_malloc_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_markup_collect_attributes[I32](element_name': Pointer[U8] tag, attribute_names': Pointer[Pointer[U8]] tag, attribute_values': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT], first_type': U32, first_attr': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_markup_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_markup_escape_text[Pointer[U8] tag](text': Pointer[U8] tag, length': I64)
test/GLib/GLibNSUse.pony:// use @g_markup_printf_escaped[Pointer[U8] tag](format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_markup_vprintf_escaped[Pointer[U8] tag](format': Pointer[U8] tag, args': valisttagT)
test/GLib/GLibNSUse.pony:// use @g_mem_profile[None]()
test/GLib/GLibNSUse.pony:// use @g_mem_set_vtable[None](vtable': GMemVTableT)
test/GLib/GLibNSUse.pony:// use @g_memdup[Pointer[None] tag](mem': Pointer[None] tag, byte_size': U32)
test/GLib/GLibNSUse.pony:// use @g_mkdir_with_parents[I32](pathname': Pointer[U8] tag, mode': I32)
test/GLib/GLibNSUse.pony:// use @g_mkdtemp[Pointer[U8] tag](tmpl': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_mkdtemp_full[Pointer[U8] tag](tmpl': Pointer[U8] tag, mode': I32)
test/GLib/GLibNSUse.pony:// use @g_mkstemp[I32](tmpl': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_mkstemp_full[I32](tmpl': Pointer[U8] tag, flags': I32, mode': I32)
test/GLib/GLibNSUse.pony:// use @g_nullify_pointer[None](nullify_location': Pointer[Pointer[None]] tag)
test/GLib/GLibNSUse.pony:// use @g_number_parser_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_on_error_query[None](prg_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_on_error_stack_trace[None](prg_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_option_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_parse_debug_string[U32](string': Pointer[U8] tag, keys': GDebugKeyT, nkeys': U32)
test/GLib/GLibNSUse.pony:// use @g_path_get_basename[Pointer[U8] tag](file_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_path_get_dirname[Pointer[U8] tag](file_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_path_is_absolute[I32](file_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_path_skip_root[Pointer[U8] tag](file_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_pattern_match[I32](pspec': GPatternSpecT, string_length': U32, string': Pointer[U8] tag, string_reversed': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_pattern_match_simple[I32](pattern': Pointer[U8] tag, string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_pattern_match_string[I32](pspec': GPatternSpecT, string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_pointer_bit_lock[None](address': Pointer[None] tag, lock_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_pointer_bit_trylock[I32](address': Pointer[None] tag, lock_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_pointer_bit_unlock[None](address': Pointer[None] tag, lock_bit': I32)
test/GLib/GLibNSUse.pony:// use @g_poll[I32](fds': GPollFDT, nfds': U32, timeout': I32)
test/GLib/GLibNSUse.pony:// use @g_prefix_error[None](err': Pointer[GErrorT], format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_print[None](format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_printerr[None](format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_printf_string_upper_bound[U64](format': Pointer[U8] tag, args': valisttagT)
test/GLib/GLibNSUse.pony:// use @g_propagate_error[None](dest': Pointer[GErrorT], src': GErrorT)
test/GLib/GLibNSUse.pony:// use @g_propagate_prefixed_error[None](dest': Pointer[GErrorT], src': GErrorT, format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_qsort_with_data[None](pbase': Pointer[None] tag, total_elems': I32, size': U64, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_quark_from_static_string[U32](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_quark_from_string[U32](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_quark_to_string[Pointer[U8] tag](quark': U32)
test/GLib/GLibNSUse.pony:// use @g_quark_try_string[U32](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_random_double[F64]()
test/GLib/GLibNSUse.pony:// use @g_random_double_range[F64](begin': F64, end': F64)
test/GLib/GLibNSUse.pony:// use @g_random_int[U32]()
test/GLib/GLibNSUse.pony:// use @g_random_int_range[I32](begin': I32, end': I32)
test/GLib/GLibNSUse.pony:// use @g_random_set_seed[None](seed': U32)
test/GLib/GLibNSUse.pony:// use @g_rc_box_acquire[Pointer[None] tag](mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_rc_box_alloc[Pointer[None] tag](block_size': U64)
test/GLib/GLibNSUse.pony:// use @g_rc_box_alloc0[Pointer[None] tag](block_size': U64)
test/GLib/GLibNSUse.pony:// use @g_rc_box_dup[Pointer[None] tag](block_size': U64, mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_rc_box_get_size[U64](mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_rc_box_release[None](mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_rc_box_release_full[None](mem_block': Pointer[None] tag, clear_func': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_realloc[Pointer[None] tag](mem': Pointer[None] tag, n_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_realloc_n[Pointer[None] tag](mem': Pointer[None] tag, n_blocks': U64, n_block_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_ref_count_compare[I32](rc': Pointer[I32] tag, val': I32)
test/GLib/GLibNSUse.pony:// use @g_ref_count_dec[I32](rc': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_ref_count_inc[None](rc': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_ref_count_init[None](rc': Pointer[I32] tag)
test/GLib/GLibNSUse.pony:// use @g_ref_string_acquire[Pointer[U8] tag](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_ref_string_length[U64](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_ref_string_new[Pointer[U8] tag](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_ref_string_new_intern[Pointer[U8] tag](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_ref_string_new_len[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_ref_string_release[None](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_reload_user_special_dirs_cache[None]()
test/GLib/GLibNSUse.pony:// use @g_return_if_fail_warning[None](log_domain': Pointer[U8] tag, pretty_function': Pointer[U8] tag, expression': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_set_application_name[None](application_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_set_error[None](err': Pointer[GErrorT], domain': U32, code': I32, format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_set_error_literal[None](err': Pointer[GErrorT], domain': U32, code': I32, message': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_set_prgname[None](prgname': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_set_print_handler[GPrintFunc](func': GPrintFunc)
test/GLib/GLibNSUse.pony:// use @g_set_printerr_handler[GPrintFunc](func': GPrintFunc)
test/GLib/GLibNSUse.pony:// use @g_setenv[I32](variable': Pointer[U8] tag, value': Pointer[U8] tag, overwrite': I32)
test/GLib/GLibNSUse.pony:// use @g_shell_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_shell_parse_argv[I32](command_line': Pointer[U8] tag, argcp': Pointer[I32] tag, argvp': Pointer[Pointer[Pointer[U8]]] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_shell_quote[Pointer[U8] tag](unquoted_string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_shell_unquote[Pointer[U8] tag](quoted_string': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_slice_alloc[Pointer[None] tag](block_size': U64)
test/GLib/GLibNSUse.pony:// use @g_slice_alloc0[Pointer[None] tag](block_size': U64)
test/GLib/GLibNSUse.pony:// use @g_slice_copy[Pointer[None] tag](block_size': U64, mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_slice_free1[None](block_size': U64, mem_block': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_slice_free_chain_with_offset[None](block_size': U64, mem_chain': Pointer[None] tag, next_offset': U64)
test/GLib/GLibNSUse.pony:// use @g_slice_get_config[I64](ckey': U32)
test/GLib/GLibNSUse.pony:// use @g_slice_get_config_state[Pointer[I64] tag](ckey': U32, address': I64, n_values': Pointer[U32] tag)
test/GLib/GLibNSUse.pony:// use @g_slice_set_config[None](ckey': U32, value': I64)
test/GLib/GLibNSUse.pony:// use @g_snprintf[I32](string': Pointer[U8] tag, n': U64, format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_spaced_primes_closest[U32](num': U32)
test/GLib/GLibNSUse.pony:// use @g_spawn_async[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, child_pid': Pointer[I32] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_spawn_async_with_fds[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, child_pid': Pointer[I32] tag, stdin_fd': I32, stdout_fd': I32, stderr_fd': I32, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_spawn_async_with_pipes[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, child_pid': Pointer[I32] tag, standard_input': Pointer[I32] tag, standard_output': Pointer[I32] tag, standard_error': Pointer[I32] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_spawn_check_exit_status[I32](wait_status': I32, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_spawn_close_pid[None](pid': I32)
test/GLib/GLibNSUse.pony:// use @g_spawn_command_line_async[I32](command_line': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_spawn_command_line_sync[I32](command_line': Pointer[U8] tag, standard_output': Pointer[Pointer[U8]] tag, standard_error': Pointer[Pointer[U8]] tag, wait_status': Pointer[I32] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_spawn_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_spawn_exit_error_quark[U32]()
test/GLib/GLibNSUse.pony:// use @g_spawn_sync[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, standard_output': Pointer[Pointer[U8]] tag, standard_error': Pointer[Pointer[U8]] tag, wait_status': Pointer[I32] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_stpcpy[Pointer[U8] tag](dest': Pointer[U8] tag, src': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_str_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_str_has_prefix[I32](str': Pointer[U8] tag, prefix': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_str_has_suffix[I32](str': Pointer[U8] tag, suffix': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_str_hash[U32](v': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_str_is_ascii[I32](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_str_match_string[I32](search_term': Pointer[U8] tag, potential_hit': Pointer[U8] tag, accept_alternates': I32)
test/GLib/GLibNSUse.pony:// use @g_str_to_ascii[Pointer[U8] tag](str': Pointer[U8] tag, from_locale': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_str_tokenize_and_fold[Pointer[Pointer[U8]] tag](string': Pointer[U8] tag, translit_locale': Pointer[U8] tag, ascii_alternates': Pointer[Pointer[Pointer[U8]]] tag)
test/GLib/GLibNSUse.pony:// use @g_strcanon[Pointer[U8] tag](string': Pointer[U8] tag, valid_chars': Pointer[U8] tag, substitutor': U8)
test/GLib/GLibNSUse.pony:// use @g_strcasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strchomp[Pointer[U8] tag](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strchug[Pointer[U8] tag](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strcmp0[I32](str1': Pointer[U8] tag, str2': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strcompress[Pointer[U8] tag](source': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strconcat[Pointer[U8] tag](string1': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_strdelimit[Pointer[U8] tag](string': Pointer[U8] tag, delimiters': Pointer[U8] tag, new_delimiter': U8)
test/GLib/GLibNSUse.pony:// use @g_strdown[Pointer[U8] tag](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strdup[Pointer[U8] tag](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strdup_printf[Pointer[U8] tag](format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_strdup_vprintf[Pointer[U8] tag](format': Pointer[U8] tag, args': valisttagT)
test/GLib/GLibNSUse.pony:// use @g_strdupv[Pointer[Pointer[U8]] tag](str_array': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_strerror[Pointer[U8] tag](errnum': I32)
test/GLib/GLibNSUse.pony:// use @g_strescape[Pointer[U8] tag](source': Pointer[U8] tag, exceptions': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strfreev[None](str_array': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_string_new[GStringT](init': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_string_new_len[GStringT](init': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_string_sized_new[GStringT](dfl_size': U64)
test/GLib/GLibNSUse.pony:// use @g_strip_context[Pointer[U8] tag](msgid': Pointer[U8] tag, msgval': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strjoin[Pointer[U8] tag](separator': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_strjoinv[Pointer[U8] tag](separator': Pointer[U8] tag, str_array': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_strlcat[U64](dest': Pointer[U8] tag, src': Pointer[U8] tag, dest_size': U64)
test/GLib/GLibNSUse.pony:// use @g_strlcpy[U64](dest': Pointer[U8] tag, src': Pointer[U8] tag, dest_size': U64)
test/GLib/GLibNSUse.pony:// use @g_strncasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag, n': U32)
test/GLib/GLibNSUse.pony:// use @g_strndup[Pointer[U8] tag](str': Pointer[U8] tag, n': U64)
test/GLib/GLibNSUse.pony:// use @g_strnfill[Pointer[U8] tag](length': U64, fill_char': U8)
test/GLib/GLibNSUse.pony:// use @g_strreverse[Pointer[U8] tag](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strrstr[Pointer[U8] tag](haystack': Pointer[U8] tag, needle': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strrstr_len[Pointer[U8] tag](haystack': Pointer[U8] tag, haystack_len': I64, needle': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strsignal[Pointer[U8] tag](signum': I32)
test/GLib/GLibNSUse.pony:// use @g_strsplit[Pointer[Pointer[U8]] tag](string': Pointer[U8] tag, delimiter': Pointer[U8] tag, max_tokens': I32)
test/GLib/GLibNSUse.pony:// use @g_strsplit_set[Pointer[Pointer[U8]] tag](string': Pointer[U8] tag, delimiters': Pointer[U8] tag, max_tokens': I32)
test/GLib/GLibNSUse.pony:// use @g_strstr_len[Pointer[U8] tag](haystack': Pointer[U8] tag, haystack_len': I64, needle': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strtod[F64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_strup[Pointer[U8] tag](string': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strv_contains[I32](strv': Pointer[Pointer[U8]] tag, str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_strv_equal[I32](strv1': Pointer[Pointer[U8]] tag, strv2': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_strv_get_type[U64]()
test/GLib/GLibNSUse.pony:// use @g_strv_length[U32](str_array': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_test_add_data_func[None](testpath': Pointer[U8] tag, test_data': Pointer[None] tag, test_func': GTestDataFunc)
test/GLib/GLibNSUse.pony:// use @g_test_add_data_func_full[None](testpath': Pointer[U8] tag, test_data': Pointer[None] tag, test_func': GTestDataFunc, data_free_func': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_test_add_func[None](testpath': Pointer[U8] tag, test_func': GTestFunc)
test/GLib/GLibNSUse.pony:// use @g_test_add_vtable[None](testpath': Pointer[U8] tag, data_size': U64, test_data': Pointer[None] tag, data_setup': GTestFixtureFunc, data_test': GTestFixtureFunc, data_teardown': GTestFixtureFunc)
test/GLib/GLibNSUse.pony:// use @g_test_assert_expected_messages_internal[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_bug[None](bug_uri_snippet': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_bug_base[None](uri_pattern': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_build_filename[Pointer[U8] tag](file_type': U32, first_path': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_test_create_case[GTestCaseT](test_name': Pointer[U8] tag, data_size': U64, test_data': Pointer[None] tag, data_setup': GTestFixtureFunc, data_test': GTestFixtureFunc, data_teardown': GTestFixtureFunc)
test/GLib/GLibNSUse.pony:// use @g_test_create_suite[GTestSuiteT](suite_name': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_expect_message[None](log_domain': Pointer[U8] tag, log_level': I32, pattern': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_fail[None]()
test/GLib/GLibNSUse.pony:// use @g_test_failed[I32]()
test/GLib/GLibNSUse.pony:// use @g_test_get_dir[Pointer[U8] tag](file_type': U32)
test/GLib/GLibNSUse.pony:// use @g_test_get_filename[Pointer[U8] tag](file_type': U32, first_path': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_test_get_root[GTestSuiteT]()
test/GLib/GLibNSUse.pony:// use @g_test_incomplete[None](msg': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_init[None](argc': Pointer[I32] tag, argv': Pointer[Pointer[Pointer[U8]]] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_test_log_set_fatal_handler[None](log_func': GTestLogFatalFunc, user_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_test_log_type_name[Pointer[U8] tag](log_type': U32)
test/GLib/GLibNSUse.pony:// use @g_test_maximized_result[None](maximized_quantity': F64, format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_test_message[None](format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_test_minimized_result[None](minimized_quantity': F64, format': Pointer[U8] tag, ...)
test/GLib/GLibNSUse.pony:// use @g_test_queue_destroy[None](destroy_func': GDestroyNotify, destroy_data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_test_queue_free[None](gfree_pointer': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_test_rand_double[F64]()
test/GLib/GLibNSUse.pony:// use @g_test_rand_double_range[F64](range_start': F64, range_end': F64)
test/GLib/GLibNSUse.pony:// use @g_test_rand_int[I32]()
test/GLib/GLibNSUse.pony:// use @g_test_rand_int_range[I32](begin': I32, end': I32)
test/GLib/GLibNSUse.pony:// use @g_test_run[I32]()
test/GLib/GLibNSUse.pony:// use @g_test_run_suite[I32](suite': GTestSuiteT)
test/GLib/GLibNSUse.pony:// use @g_test_set_nonfatal_assertions[None]()
test/GLib/GLibNSUse.pony:// use @g_test_skip[None](msg': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_subprocess[I32]()
test/GLib/GLibNSUse.pony:// use @g_test_summary[None](summary': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_timer_elapsed[F64]()
test/GLib/GLibNSUse.pony:// use @g_test_timer_last[F64]()
test/GLib/GLibNSUse.pony:// use @g_test_timer_start[None]()
test/GLib/GLibNSUse.pony:// use @g_test_trap_assertions[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, assertion_flags': U64, pattern': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_test_trap_fork[I32](usec_timeout': U64, test_trap_flags': U32)
test/GLib/GLibNSUse.pony:// use @g_test_trap_has_passed[I32]()
test/GLib/GLibNSUse.pony:// use @g_test_trap_reached_timeout[I32]()
test/GLib/GLibNSUse.pony:// use @g_test_trap_subprocess[None](test_path': Pointer[U8] tag, usec_timeout': U64, test_flags': U32)
test/GLib/GLibNSUse.pony:// use @g_timeout_add[U32](interval': U32, function': GSourceFunc, data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_timeout_add_full[U32](priority': I32, interval': U32, function': GSourceFunc, data': Pointer[None] tag, notify': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_timeout_add_seconds[U32](interval': U32, function': GSourceFunc, data': Pointer[None] tag)
test/GLib/GLibNSUse.pony:// use @g_timeout_add_seconds_full[U32](priority': I32, interval': U32, function': GSourceFunc, data': Pointer[None] tag, notify': GDestroyNotify)
test/GLib/GLibNSUse.pony:// use @g_timeout_source_new[GSourceT](interval': U32)
test/GLib/GLibNSUse.pony:// use @g_timeout_source_new_seconds[GSourceT](interval': U32)
test/GLib/GLibNSUse.pony:// use @g_try_malloc[Pointer[None] tag](n_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_try_malloc0[Pointer[None] tag](n_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_try_malloc0_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_try_malloc_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_try_realloc[Pointer[None] tag](mem': Pointer[None] tag, n_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_try_realloc_n[Pointer[None] tag](mem': Pointer[None] tag, n_blocks': U64, n_block_bytes': U64)
test/GLib/GLibNSUse.pony:// use @g_ucs4_to_utf16[Pointer[U16] tag](str': Pointer[U32] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_ucs4_to_utf8[Pointer[U8] tag](str': Pointer[U32] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_unichar_break_type[U32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_combining_class[I32](uc': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_compose[I32](a': U32, b': U32, ch': Pointer[U32] tag)
test/GLib/GLibNSUse.pony:// use @g_unichar_decompose[I32](ch': U32, a': Pointer[U32] tag, b': Pointer[U32] tag)
test/GLib/GLibNSUse.pony:// use @g_unichar_digit_value[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_fully_decompose[U64](ch': U32, compat': I32, result': Pointer[U32] tag, result_len': U64)
test/GLib/GLibNSUse.pony:// use @g_unichar_get_mirror_char[I32](ch': U32, mirrored_ch': Pointer[U32] tag)
test/GLib/GLibNSUse.pony:// use @g_unichar_get_script[I32](ch': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isalnum[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isalpha[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_iscntrl[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isdefined[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isdigit[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isgraph[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_islower[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_ismark[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isprint[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_ispunct[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isspace[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_istitle[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isupper[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_iswide[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_iswide_cjk[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_isxdigit[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_iszerowidth[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_to_utf8[I32](c': U32, outbuf': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_unichar_tolower[U32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_totitle[U32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_toupper[U32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_type[U32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_validate[I32](ch': U32)
test/GLib/GLibNSUse.pony:// use @g_unichar_xdigit_value[I32](c': U32)
test/GLib/GLibNSUse.pony:// use @g_unicode_canonical_ordering[None](string': Pointer[U32] tag, len': U64)
test/GLib/GLibNSUse.pony:// use @g_unicode_script_from_iso15924[I32](iso15924': U32)
test/GLib/GLibNSUse.pony:// use @g_unicode_script_to_iso15924[U32](script': I32)
test/GLib/GLibNSUse.pony:// use @g_unsetenv[None](variable': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_usleep[None](microseconds': U64)
test/GLib/GLibNSUse.pony:// use @g_utf16_to_ucs4[Pointer[U32] tag](str': Pointer[U16] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_utf16_to_utf8[Pointer[U8] tag](str': Pointer[U16] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_utf8_casefold[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_collate[I32](str1': Pointer[U8] tag, str2': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_collate_key[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_collate_key_for_filename[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_find_next_char[Pointer[U8] tag](p': Pointer[U8] tag, end': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_find_prev_char[Pointer[U8] tag](str': Pointer[U8] tag, p': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_get_char[U32](p': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_get_char_validated[U32](p': Pointer[U8] tag, max_len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_make_valid[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_normalize[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, mode': U32)
test/GLib/GLibNSUse.pony:// use @g_utf8_offset_to_pointer[Pointer[U8] tag](str': Pointer[U8] tag, offset': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_pointer_to_offset[I64](str': Pointer[U8] tag, pos': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_prev_char[Pointer[U8] tag](p': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_strchr[Pointer[U8] tag](p': Pointer[U8] tag, len': I64, c': U32)
test/GLib/GLibNSUse.pony:// use @g_utf8_strdown[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_strlen[I64](p': Pointer[U8] tag, max': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_strncpy[Pointer[U8] tag](dest': Pointer[U8] tag, src': Pointer[U8] tag, n': U64)
test/GLib/GLibNSUse.pony:// use @g_utf8_strrchr[Pointer[U8] tag](p': Pointer[U8] tag, len': I64, c': U32)
test/GLib/GLibNSUse.pony:// use @g_utf8_strreverse[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_strup[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_substring[Pointer[U8] tag](str': Pointer[U8] tag, start_pos': I64, end_pos': I64)
test/GLib/GLibNSUse.pony:// use @g_utf8_to_ucs4[Pointer[U32] tag](str': Pointer[U8] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_utf8_to_ucs4_fast[Pointer[U32] tag](str': Pointer[U8] tag, len': I64, items_written': Pointer[I64] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_to_utf16[Pointer[U16] tag](str': Pointer[U8] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
test/GLib/GLibNSUse.pony:// use @g_utf8_validate[I32](str': Pointer[U8] tag, max_len': I64, end': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_utf8_validate_len[I32](str': Pointer[U8] tag, max_len': U64, end': Pointer[Pointer[U8]] tag)
test/GLib/GLibNSUse.pony:// use @g_uuid_string_is_valid[I32](str': Pointer[U8] tag)
test/GLib/GLibNSUse.pony:// use @g_variant_get_gtype[U64]()
test/GLib/GLibNSUse.pony:// use @g_vsnprintf[I32](string': Pointer[U8] tag, n': U64, format': Pointer[U8] tag, args': valisttagT)
test/GLib/GLibNSUse.pony:// use @g_warn_message[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, warnexpr': Pointer[U8] tag)
test/GLib/GListUse.pony:use "lib:glib-2.0"
test/GLib/GListUse.pony:// use @g_list_alloc[GListT]()
test/GLib/GListUse.pony:// use @g_list_append[GListT](list': GListT, data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_concat[GListT](list1': GListT, list2': GListT)
test/GLib/GListUse.pony:// use @g_list_copy[GListT](list': GListT)
test/GLib/GListUse.pony:// use @g_list_copy_deep[GListT](list': GListT, func': GCopyFunc, user_data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_delete_link[GListT](list': GListT, link_': GListT)
test/GLib/GListUse.pony:// use @g_list_find[GListT](list': GListT, data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_find_custom[GListT](list': GListT, data': Pointer[None] tag, func': GCompareFunc)
test/GLib/GListUse.pony:// use @g_list_first[GListT](list': GListT)
test/GLib/GListUse.pony:// use @g_list_foreach[None](list': GListT, func': GFunc, user_data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_free[None](list': GListT)
test/GLib/GListUse.pony:// use @g_list_free_1[None](list': GListT)
test/GLib/GListUse.pony:// use @g_list_free_full[None](list': GListT, free_func': GDestroyNotify)
test/GLib/GListUse.pony:// use @g_list_index[I32](list': GListT, data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_insert[GListT](list': GListT, data': Pointer[None] tag, position': I32)
test/GLib/GListUse.pony:// use @g_list_insert_before[GListT](list': GListT, sibling': GListT, data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_insert_before_link[GListT](list': GListT, sibling': GListT, link_': GListT)
test/GLib/GListUse.pony:// use @g_list_insert_sorted[GListT](list': GListT, data': Pointer[None] tag, func': GCompareFunc)
test/GLib/GListUse.pony:// use @g_list_insert_sorted_with_data[GListT](list': GListT, data': Pointer[None] tag, func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_last[GListT](list': GListT)
test/GLib/GListUse.pony:// use @g_list_length[U32](list': GListT)
test/GLib/GListUse.pony:// use @g_list_nth[GListT](list': GListT, n': U32)
test/GLib/GListUse.pony:// use @g_list_nth_data[Pointer[None] tag](list': GListT, n': U32)
test/GLib/GListUse.pony:// use @g_list_nth_prev[GListT](list': GListT, n': U32)
test/GLib/GListUse.pony:// use @g_list_position[I32](list': GListT, llink': GListT)
test/GLib/GListUse.pony:// use @g_list_prepend[GListT](list': GListT, data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_remove[GListT](list': GListT, data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_remove_all[GListT](list': GListT, data': Pointer[None] tag)
test/GLib/GListUse.pony:// use @g_list_remove_link[GListT](list': GListT, llink': GListT)
test/GLib/GListUse.pony:// use @g_list_reverse[GListT](list': GListT)
test/GLib/GListUse.pony:// use @g_list_sort[GListT](list': GListT, compare_func': GCompareFunc)
test/GLib/GListUse.pony:// use @g_list_sort_with_data[GListT](list': GListT, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GLogFieldUse.pony:use "lib:glib-2.0"
test/GLib/GMainContextUse.pony:use "lib:glib-2.0"
test/GLib/GMainContextUse.pony:// use @g_main_context_default[GMainContextT]()
test/GLib/GMainContextUse.pony:// use @g_main_context_get_thread_default[GMainContextT]()
test/GLib/GMainContextUse.pony:// use @g_main_context_ref_thread_default[GMainContextT]()
test/GLib/GMainContextUse.pony:// use @g_main_context_new[GMainContextT]()
test/GLib/GMainContextUse.pony:// use @g_main_context_acquire[I32](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_add_poll[None](context': GMainContextT, fd': GPollFDT, priority': I32)
test/GLib/GMainContextUse.pony:// use @g_main_context_check[I32](context': GMainContextT, max_priority': I32, fds': GPollFDT, n_fds': I32)
test/GLib/GMainContextUse.pony:// use @g_main_context_dispatch[None](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_find_source_by_funcs_user_data[GSourceT](context': GMainContextT, funcs': GSourceFuncsT, user_data': Pointer[None] tag)
test/GLib/GMainContextUse.pony:// use @g_main_context_find_source_by_id[GSourceT](context': GMainContextT, source_id': U32)
test/GLib/GMainContextUse.pony:// use @g_main_context_find_source_by_user_data[GSourceT](context': GMainContextT, user_data': Pointer[None] tag)
test/GLib/GMainContextUse.pony:// use @g_main_context_get_poll_func[GPollFunc](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_invoke[None](context': GMainContextT, function': GSourceFunc, data': Pointer[None] tag)
test/GLib/GMainContextUse.pony:// use @g_main_context_invoke_full[None](context': GMainContextT, priority': I32, function': GSourceFunc, data': Pointer[None] tag, notify': GDestroyNotify)
test/GLib/GMainContextUse.pony:// use @g_main_context_is_owner[I32](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_iteration[I32](context': GMainContextT, may_block': I32)
test/GLib/GMainContextUse.pony:// use @g_main_context_pending[I32](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_pop_thread_default[None](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_prepare[I32](context': GMainContextT, priority': Pointer[I32] tag)
test/GLib/GMainContextUse.pony:// use @g_main_context_push_thread_default[None](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_query[I32](context': GMainContextT, max_priority': I32, timeout_': Pointer[I32] tag, fds': GPollFDT, n_fds': I32)
test/GLib/GMainContextUse.pony:// use @g_main_context_ref[GMainContextT](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_release[None](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_remove_poll[None](context': GMainContextT, fd': GPollFDT)
test/GLib/GMainContextUse.pony:// use @g_main_context_set_poll_func[None](context': GMainContextT, func': GPollFunc)
test/GLib/GMainContextUse.pony:// use @g_main_context_unref[None](context': GMainContextT)
test/GLib/GMainContextUse.pony:// use @g_main_context_wakeup[None](context': GMainContextT)
test/GLib/GNodeUse.pony:use "lib:glib-2.0"
test/GLib/GNodeUse.pony:// use @g_node_new[GNodeT](data': Pointer[None] tag)
test/GLib/GNodeUse.pony:// use @g_node_child_index[I32](node': GNodeT, data': Pointer[None] tag)
test/GLib/GNodeUse.pony:// use @g_node_child_position[I32](node': GNodeT, child': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_children_foreach[None](node': GNodeT, flags': U32, func': GNodeForeachFunc, data': Pointer[None] tag)
test/GLib/GNodeUse.pony:// use @g_node_copy[GNodeT](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_copy_deep[GNodeT](node': GNodeT, copy_func': GCopyFunc, data': Pointer[None] tag)
test/GLib/GNodeUse.pony:// use @g_node_depth[U32](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_destroy[None](root': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_find[GNodeT](root': GNodeT, order': U32, flags': U32, data': Pointer[None] tag)
test/GLib/GNodeUse.pony:// use @g_node_find_child[GNodeT](node': GNodeT, flags': U32, data': Pointer[None] tag)
test/GLib/GNodeUse.pony:// use @g_node_first_sibling[GNodeT](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_get_root[GNodeT](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_insert[GNodeT](parent': GNodeT, position': I32, node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_insert_after[GNodeT](parent': GNodeT, sibling': GNodeT, node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_insert_before[GNodeT](parent': GNodeT, sibling': GNodeT, node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_is_ancestor[I32](node': GNodeT, descendant': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_last_child[GNodeT](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_last_sibling[GNodeT](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_max_height[U32](root': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_n_children[U32](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_n_nodes[U32](root': GNodeT, flags': U32)
test/GLib/GNodeUse.pony:// use @g_node_nth_child[GNodeT](node': GNodeT, n': U32)
test/GLib/GNodeUse.pony:// use @g_node_prepend[GNodeT](parent': GNodeT, node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_reverse_children[None](node': GNodeT)
test/GLib/GNodeUse.pony:// use @g_node_traverse[None](root': GNodeT, order': U32, flags': U32, max_depth': I32, func': GNodeTraverseFunc, data': Pointer[None] tag)
test/GLib/GNodeUse.pony:// use @g_node_unlink[None](node': GNodeT)
test/GLib/GPtrArrayUse.pony:use "lib:glib-2.0"
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_add[None](array': GPtrArrayT, data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_copy[GPtrArrayT](array': GPtrArrayT, func': GCopyFunc, user_data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_extend[None](array_to_extend': GPtrArrayT, array': GPtrArrayT, func': GCopyFunc, user_data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_extend_and_steal[None](array_to_extend': GPtrArrayT, array': GPtrArrayT)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_find[I32](haystack': GPtrArrayT, needle': Pointer[None] tag, index_': Pointer[U32] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_find_with_equal_func[I32](haystack': GPtrArrayT, needle': Pointer[None] tag, equal_func': GEqualFunc, index_': Pointer[U32] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_foreach[None](array': GPtrArrayT, func': GFunc, user_data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_free[Pointer[Pointer[None]] tag](array': GPtrArrayT, free_seg': I32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_insert[None](array': GPtrArrayT, index_': I32, data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_new[GPtrArrayT]()
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_new_full[GPtrArrayT](reserved_size': U32, element_free_func': GDestroyNotify)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_new_with_free_func[GPtrArrayT](element_free_func': GDestroyNotify)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_ref[GPtrArrayT](array': GPtrArrayT)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_remove[I32](array': GPtrArrayT, data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_remove_fast[I32](array': GPtrArrayT, data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_remove_index[Pointer[None] tag](array': GPtrArrayT, index_': U32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_remove_index_fast[Pointer[None] tag](array': GPtrArrayT, index_': U32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_remove_range[GPtrArrayT](array': GPtrArrayT, index_': U32, length': U32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_set_free_func[None](array': GPtrArrayT, element_free_func': GDestroyNotify)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_set_size[None](array': GPtrArrayT, length': I32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_sized_new[GPtrArrayT](reserved_size': U32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_sort[None](array': GPtrArrayT, compare_func': GCompareFunc)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_sort_with_data[None](array': GPtrArrayT, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_steal[Pointer[Pointer[None]] tag](array': GPtrArrayT, len': Pointer[U64] tag)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_steal_index[Pointer[None] tag](array': GPtrArrayT, index_': U32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_steal_index_fast[Pointer[None] tag](array': GPtrArrayT, index_': U32)
test/GLib/GPtrArrayUse.pony:// use @g_ptr_array_unref[None](array': GPtrArrayT)
test/GLib/GQueueUse.pony:use "lib:glib-2.0"
test/GLib/GQueueUse.pony:// use @g_queue_new[GQueueT]()
test/GLib/GQueueUse.pony:// use @g_queue_clear[None](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_clear_full[None](queue': GQueueT, free_func': GDestroyNotify)
test/GLib/GQueueUse.pony:// use @g_queue_copy[GQueueT](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_delete_link[None](queue': GQueueT, link_': GListT)
test/GLib/GQueueUse.pony:// use @g_queue_find[GListT](queue': GQueueT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_find_custom[GListT](queue': GQueueT, data': Pointer[None] tag, func': GCompareFunc)
test/GLib/GQueueUse.pony:// use @g_queue_foreach[None](queue': GQueueT, func': GFunc, user_data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_free[None](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_free_full[None](queue': GQueueT, free_func': GDestroyNotify)
test/GLib/GQueueUse.pony:// use @g_queue_get_length[U32](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_index[I32](queue': GQueueT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_init[None](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_insert_after[None](queue': GQueueT, sibling': GListT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_insert_after_link[None](queue': GQueueT, sibling': GListT, link_': GListT)
test/GLib/GQueueUse.pony:// use @g_queue_insert_before[None](queue': GQueueT, sibling': GListT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_insert_before_link[None](queue': GQueueT, sibling': GListT, link_': GListT)
test/GLib/GQueueUse.pony:// use @g_queue_insert_sorted[None](queue': GQueueT, data': Pointer[None] tag, func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_is_empty[I32](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_link_index[I32](queue': GQueueT, link_': GListT)
test/GLib/GQueueUse.pony:// use @g_queue_peek_head[Pointer[None] tag](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_peek_head_link[GListT](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_peek_nth[Pointer[None] tag](queue': GQueueT, n': U32)
test/GLib/GQueueUse.pony:// use @g_queue_peek_nth_link[GListT](queue': GQueueT, n': U32)
test/GLib/GQueueUse.pony:// use @g_queue_peek_tail[Pointer[None] tag](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_peek_tail_link[GListT](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_pop_head[Pointer[None] tag](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_pop_head_link[GListT](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_pop_nth[Pointer[None] tag](queue': GQueueT, n': U32)
test/GLib/GQueueUse.pony:// use @g_queue_pop_nth_link[GListT](queue': GQueueT, n': U32)
test/GLib/GQueueUse.pony:// use @g_queue_pop_tail[Pointer[None] tag](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_pop_tail_link[GListT](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_push_head[None](queue': GQueueT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_push_head_link[None](queue': GQueueT, link_': GListT)
test/GLib/GQueueUse.pony:// use @g_queue_push_nth[None](queue': GQueueT, data': Pointer[None] tag, n': I32)
test/GLib/GQueueUse.pony:// use @g_queue_push_nth_link[None](queue': GQueueT, n': I32, link_': GListT)
test/GLib/GQueueUse.pony:// use @g_queue_push_tail[None](queue': GQueueT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_push_tail_link[None](queue': GQueueT, link_': GListT)
test/GLib/GQueueUse.pony:// use @g_queue_remove[I32](queue': GQueueT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_remove_all[U32](queue': GQueueT, data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_reverse[None](queue': GQueueT)
test/GLib/GQueueUse.pony:// use @g_queue_sort[None](queue': GQueueT, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GQueueUse.pony:// use @g_queue_unlink[None](queue': GQueueT, link_': GListT)
test/GLib/GSequenceUse.pony:use "lib:glib-2.0"
test/GLib/GSequenceUse.pony:// use @g_sequence_foreach_range[None](begin': GSequenceNodeT, end': GSequenceNodeT, func': GFunc, user_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_get[Pointer[None] tag](iter': GSequenceNodeT)
test/GLib/GSequenceUse.pony:// use @g_sequence_insert_before[GSequenceNodeT](iter': GSequenceNodeT, data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_move[None](src': GSequenceNodeT, dest': GSequenceNodeT)
test/GLib/GSequenceUse.pony:// use @g_sequence_move_range[None](dest': GSequenceNodeT, begin': GSequenceNodeT, end': GSequenceNodeT)
test/GLib/GSequenceUse.pony:// use @g_sequence_new[GSequenceT](data_destroy': GDestroyNotify)
test/GLib/GSequenceUse.pony:// use @g_sequence_range_get_midpoint[GSequenceNodeT](begin': GSequenceNodeT, end': GSequenceNodeT)
test/GLib/GSequenceUse.pony:// use @g_sequence_remove[None](iter': GSequenceNodeT)
test/GLib/GSequenceUse.pony:// use @g_sequence_remove_range[None](begin': GSequenceNodeT, end': GSequenceNodeT)
test/GLib/GSequenceUse.pony:// use @g_sequence_set[None](iter': GSequenceNodeT, data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_sort_changed[None](iter': GSequenceNodeT, cmp_func': GCompareDataFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_sort_changed_iter[None](iter': GSequenceNodeT, iter_cmp': GSequenceIterCompareFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_swap[None](a': GSequenceNodeT, b': GSequenceNodeT)
test/GLib/GSequenceUse.pony:// use @g_sequence_append[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_foreach[None](seq': GSequenceT, func': GFunc, user_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_free[None](seq': GSequenceT)
test/GLib/GSequenceUse.pony:// use @g_sequence_get_begin_iter[GSequenceNodeT](seq': GSequenceT)
test/GLib/GSequenceUse.pony:// use @g_sequence_get_end_iter[GSequenceNodeT](seq': GSequenceT)
test/GLib/GSequenceUse.pony:// use @g_sequence_get_iter_at_pos[GSequenceNodeT](seq': GSequenceT, pos': I32)
test/GLib/GSequenceUse.pony:// use @g_sequence_get_length[I32](seq': GSequenceT)
test/GLib/GSequenceUse.pony:// use @g_sequence_insert_sorted[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag, cmp_func': GCompareDataFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_insert_sorted_iter[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag, iter_cmp': GSequenceIterCompareFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_is_empty[I32](seq': GSequenceT)
test/GLib/GSequenceUse.pony:// use @g_sequence_lookup[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag, cmp_func': GCompareDataFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_lookup_iter[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag, iter_cmp': GSequenceIterCompareFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_prepend[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_search[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag, cmp_func': GCompareDataFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_search_iter[GSequenceNodeT](seq': GSequenceT, data': Pointer[None] tag, iter_cmp': GSequenceIterCompareFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_sort[None](seq': GSequenceT, cmp_func': GCompareDataFunc, cmp_data': Pointer[None] tag)
test/GLib/GSequenceUse.pony:// use @g_sequence_sort_iter[None](seq': GSequenceT, cmp_func': GSequenceIterCompareFunc, cmp_data': Pointer[None] tag)
test/GLib/GSListUse.pony:use "lib:glib-2.0"
test/GLib/GSListUse.pony:// use @g_slist_alloc[GSListT]()
test/GLib/GSListUse.pony:// use @g_slist_append[GSListT](list': GSListT, data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_concat[GSListT](list1': GSListT, list2': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_copy[GSListT](list': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_copy_deep[GSListT](list': GSListT, func': GCopyFunc, user_data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_delete_link[GSListT](list': GSListT, link_': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_find[GSListT](list': GSListT, data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_find_custom[GSListT](list': GSListT, data': Pointer[None] tag, func': GCompareFunc)
test/GLib/GSListUse.pony:// use @g_slist_foreach[None](list': GSListT, func': GFunc, user_data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_free[None](list': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_free_1[None](list': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_free_full[None](list': GSListT, free_func': GDestroyNotify)
test/GLib/GSListUse.pony:// use @g_slist_index[I32](list': GSListT, data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_insert[GSListT](list': GSListT, data': Pointer[None] tag, position': I32)
test/GLib/GSListUse.pony:// use @g_slist_insert_before[GSListT](slist': GSListT, sibling': GSListT, data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_insert_sorted[GSListT](list': GSListT, data': Pointer[None] tag, func': GCompareFunc)
test/GLib/GSListUse.pony:// use @g_slist_insert_sorted_with_data[GSListT](list': GSListT, data': Pointer[None] tag, func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_last[GSListT](list': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_length[U32](list': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_nth[GSListT](list': GSListT, n': U32)
test/GLib/GSListUse.pony:// use @g_slist_nth_data[Pointer[None] tag](list': GSListT, n': U32)
test/GLib/GSListUse.pony:// use @g_slist_position[I32](list': GSListT, llink': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_prepend[GSListT](list': GSListT, data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_remove[GSListT](list': GSListT, data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_remove_all[GSListT](list': GSListT, data': Pointer[None] tag)
test/GLib/GSListUse.pony:// use @g_slist_remove_link[GSListT](list': GSListT, link_': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_reverse[GSListT](list': GSListT)
test/GLib/GSListUse.pony:// use @g_slist_sort[GSListT](list': GSListT, compare_func': GCompareFunc)
test/GLib/GSListUse.pony:// use @g_slist_sort_with_data[GSListT](list': GSListT, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
test/GLib/GStringChunkUse.pony:use "lib:glib-2.0"
test/GLib/GStringChunkUse.pony:// use @g_string_chunk_new[GStringChunkT](size': U64)
test/GLib/GStringChunkUse.pony:// use @g_string_chunk_clear[None](chunk': GStringChunkT)
test/GLib/GStringChunkUse.pony:// use @g_string_chunk_free[None](chunk': GStringChunkT)
test/GLib/GStringChunkUse.pony:// use @g_string_chunk_insert[Pointer[U8] tag](chunk': GStringChunkT, string': Pointer[U8] tag)
test/GLib/GStringChunkUse.pony:// use @g_string_chunk_insert_const[Pointer[U8] tag](chunk': GStringChunkT, string': Pointer[U8] tag)
test/GLib/GStringChunkUse.pony:// use @g_string_chunk_insert_len[Pointer[U8] tag](chunk': GStringChunkT, string': Pointer[U8] tag, len': I64)
test/GLib/GStringUse.pony:use "lib:glib-2.0"
test/GLib/GStringUse.pony:// use @g_string_append[GStringT](string': GStringT, val': Pointer[U8] tag)
test/GLib/GStringUse.pony:// use @g_string_append_c[GStringT](string': GStringT, c': U8)
test/GLib/GStringUse.pony:// use @g_string_append_len[GStringT](string': GStringT, val': Pointer[U8] tag, len': I64)
test/GLib/GStringUse.pony:// use @g_string_append_printf[None](string': GStringT, format': Pointer[U8] tag, ...)
test/GLib/GStringUse.pony:// use @g_string_append_unichar[GStringT](string': GStringT, wc': U32)
test/GLib/GStringUse.pony:// use @g_string_append_uri_escaped[GStringT](string': GStringT, unescaped': Pointer[U8] tag, reserved_chars_allowed': Pointer[U8] tag, allow_utf8': I32)
test/GLib/GStringUse.pony:// use @g_string_append_vprintf[None](string': GStringT, format': Pointer[U8] tag, args': valisttagT)
test/GLib/GStringUse.pony:// use @g_string_ascii_down[GStringT](string': GStringT)
test/GLib/GStringUse.pony:// use @g_string_ascii_up[GStringT](string': GStringT)
test/GLib/GStringUse.pony:// use @g_string_assign[GStringT](string': GStringT, rval': Pointer[U8] tag)
test/GLib/GStringUse.pony:// use @g_string_down[GStringT](string': GStringT)
test/GLib/GStringUse.pony:// use @g_string_equal[I32](v': GStringT, v2': GStringT)
test/GLib/GStringUse.pony:// use @g_string_erase[GStringT](string': GStringT, pos': I64, len': I64)
test/GLib/GStringUse.pony:// use @g_string_free[Pointer[U8] tag](string': GStringT, free_segment': I32)
test/GLib/GStringUse.pony:// use @g_string_free_to_bytes[GBytesT](string': GStringT)
test/GLib/GStringUse.pony:// use @g_string_hash[U32](str': GStringT)
test/GLib/GStringUse.pony:// use @g_string_insert[GStringT](string': GStringT, pos': I64, val': Pointer[U8] tag)
test/GLib/GStringUse.pony:// use @g_string_insert_c[GStringT](string': GStringT, pos': I64, c': U8)
test/GLib/GStringUse.pony:// use @g_string_insert_len[GStringT](string': GStringT, pos': I64, val': Pointer[U8] tag, len': I64)
test/GLib/GStringUse.pony:// use @g_string_insert_unichar[GStringT](string': GStringT, pos': I64, wc': U32)
test/GLib/GStringUse.pony:// use @g_string_overwrite[GStringT](string': GStringT, pos': U64, val': Pointer[U8] tag)
test/GLib/GStringUse.pony:// use @g_string_overwrite_len[GStringT](string': GStringT, pos': U64, val': Pointer[U8] tag, len': I64)
test/GLib/GStringUse.pony:// use @g_string_prepend[GStringT](string': GStringT, val': Pointer[U8] tag)
test/GLib/GStringUse.pony:// use @g_string_prepend_c[GStringT](string': GStringT, c': U8)
test/GLib/GStringUse.pony:// use @g_string_prepend_len[GStringT](string': GStringT, val': Pointer[U8] tag, len': I64)
test/GLib/GStringUse.pony:// use @g_string_prepend_unichar[GStringT](string': GStringT, wc': U32)
test/GLib/GStringUse.pony:// use @g_string_printf[None](string': GStringT, format': Pointer[U8] tag, ...)
test/GLib/GStringUse.pony:// use @g_string_set_size[GStringT](string': GStringT, len': U64)
test/GLib/GStringUse.pony:// use @g_string_truncate[GStringT](string': GStringT, len': U64)
test/GLib/GStringUse.pony:// use @g_string_up[GStringT](string': GStringT)
test/GLib/GStringUse.pony:// use @g_string_vprintf[None](string': GStringT, format': Pointer[U8] tag, args': valisttagT)
test/GLib/GTimerUse.pony:use "lib:glib-2.0"
test/GLib/GTimerUse.pony:// use @g_timer_new[GTimerT]()
test/GLib/GTimerUse.pony:// use @g_timer_continue[None](timer': GTimerT)
test/GLib/GTimerUse.pony:// use @g_timer_destroy[None](timer': GTimerT)
test/GLib/GTimerUse.pony:// use @g_timer_elapsed[F64](timer': GTimerT, microseconds': Pointer[U64] tag)
test/GLib/GTimerUse.pony:// use @g_timer_is_active[I32](timer': GTimerT)
test/GLib/GTimerUse.pony:// use @g_timer_reset[None](timer': GTimerT)
test/GLib/GTimerUse.pony:// use @g_timer_start[None](timer': GTimerT)
test/GLib/GTimerUse.pony:// use @g_timer_stop[None](timer': GTimerT)
test/GLib/GTimeZoneUse.pony:use "lib:glib-2.0"
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_new[GTimeZoneT](identifier': Pointer[U8] tag)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_new_local[GTimeZoneT]()
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_new_offset[GTimeZoneT](seconds': I32)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_new_utc[GTimeZoneT]()
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_adjust_time[I32](tz': GTimeZoneT, type': U32, time_': Pointer[I64] tag)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_find_interval[I32](tz': GTimeZoneT, type': U32, time_': I64)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_get_abbreviation[Pointer[U8] tag](tz': GTimeZoneT, interval': I32)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_get_identifier[Pointer[U8] tag](tz': GTimeZoneT)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_get_offset[I32](tz': GTimeZoneT, interval': I32)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_is_dst[I32](tz': GTimeZoneT, interval': I32)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_ref[GTimeZoneT](tz': GTimeZoneT)
test/GLib/GTimeZoneUse.pony:// use @g_time_zone_unref[None](tz': GTimeZoneT)
test/GLib/GTreeUse.pony:use "lib:glib-2.0"
test/GLib/GTreeUse.pony:// use @g_tree_new[GTreeT](key_compare_func': GCompareFunc)
test/GLib/GTreeUse.pony:// use @g_tree_new_full[GTreeT](key_compare_func': GCompareDataFunc, key_compare_data': Pointer[None] tag, key_destroy_func': GDestroyNotify, value_destroy_func': GDestroyNotify)
test/GLib/GTreeUse.pony:// use @g_tree_new_with_data[GTreeT](key_compare_func': GCompareDataFunc, key_compare_data': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_destroy[None](tree': GTreeT)
test/GLib/GTreeUse.pony:// use @g_tree_foreach[None](tree': GTreeT, func': GTraverseFunc, user_data': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_height[I32](tree': GTreeT)
test/GLib/GTreeUse.pony:// use @g_tree_insert[None](tree': GTreeT, key': Pointer[None] tag, value': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_lookup[Pointer[None] tag](tree': GTreeT, key': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_lookup_extended[I32](tree': GTreeT, lookup_key': Pointer[None] tag, orig_key': Pointer[Pointer[None]] tag, value': Pointer[Pointer[None]] tag)
test/GLib/GTreeUse.pony:// use @g_tree_nnodes[I32](tree': GTreeT)
test/GLib/GTreeUse.pony:// use @g_tree_ref[GTreeT](tree': GTreeT)
test/GLib/GTreeUse.pony:// use @g_tree_remove[I32](tree': GTreeT, key': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_replace[None](tree': GTreeT, key': Pointer[None] tag, value': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_search[Pointer[None] tag](tree': GTreeT, search_func': GCompareFunc, user_data': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_steal[I32](tree': GTreeT, key': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_traverse[None](tree': GTreeT, traverse_func': GTraverseFunc, traverse_type': U32, user_data': Pointer[None] tag)
test/GLib/GTreeUse.pony:// use @g_tree_unref[None](tree': GTreeT)
test/GLib/GUriParamsIterUse.pony:use "lib:glib-2.0"
test/GLib/GUriParamsIterUse.pony:// use @g_uri_params_iter_init[None](iter': GUriParamsIterT, params': Pointer[U8] tag, length': I64, separators': Pointer[U8] tag, flags': U32)
test/GLib/GUriParamsIterUse.pony:// use @g_uri_params_iter_next[I32](iter': GUriParamsIterT, attribute': Pointer[Pointer[U8]] tag, value': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:use "lib:glib-2.0"
test/GLib/GUriUse.pony:// use @g_uri_build[GUriT](flags': U32, scheme': Pointer[U8] tag, userinfo': Pointer[U8] tag, host': Pointer[U8] tag, port': I32, path': Pointer[U8] tag, query': Pointer[U8] tag, fragment': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_build_with_user[GUriT](flags': U32, scheme': Pointer[U8] tag, user': Pointer[U8] tag, password': Pointer[U8] tag, auth_params': Pointer[U8] tag, host': Pointer[U8] tag, port': I32, path': Pointer[U8] tag, query': Pointer[U8] tag, fragment': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_error_quark[U32]()
test/GLib/GUriUse.pony:// use @g_uri_escape_bytes[Pointer[U8] tag](unescaped': Pointer[U8] tag, length': U64, reserved_chars_allowed': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_escape_string[Pointer[U8] tag](unescaped': Pointer[U8] tag, reserved_chars_allowed': Pointer[U8] tag, allow_utf8': I32)
test/GLib/GUriUse.pony:// use @g_uri_is_valid[I32](uri_string': Pointer[U8] tag, flags': U32, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_join[Pointer[U8] tag](flags': U32, scheme': Pointer[U8] tag, userinfo': Pointer[U8] tag, host': Pointer[U8] tag, port': I32, path': Pointer[U8] tag, query': Pointer[U8] tag, fragment': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_join_with_user[Pointer[U8] tag](flags': U32, scheme': Pointer[U8] tag, user': Pointer[U8] tag, password': Pointer[U8] tag, auth_params': Pointer[U8] tag, host': Pointer[U8] tag, port': I32, path': Pointer[U8] tag, query': Pointer[U8] tag, fragment': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_list_extract_uris[Pointer[Pointer[U8]] tag](uri_list': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_parse[GUriT](uri_string': Pointer[U8] tag, flags': U32, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_parse_params[GHashTableT](params': Pointer[U8] tag, length': I64, separators': Pointer[U8] tag, flags': U32, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_parse_scheme[Pointer[U8] tag](uri': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_peek_scheme[Pointer[U8] tag](uri': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_resolve_relative[Pointer[U8] tag](base_uri_string': Pointer[U8] tag, uri_ref': Pointer[U8] tag, flags': U32, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_split[I32](uri_ref': Pointer[U8] tag, flags': U32, scheme': Pointer[Pointer[U8]] tag, userinfo': Pointer[Pointer[U8]] tag, host': Pointer[Pointer[U8]] tag, port': Pointer[I32] tag, path': Pointer[Pointer[U8]] tag, query': Pointer[Pointer[U8]] tag, fragment': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_split_network[I32](uri_string': Pointer[U8] tag, flags': U32, scheme': Pointer[Pointer[U8]] tag, host': Pointer[Pointer[U8]] tag, port': Pointer[I32] tag, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_split_with_user[I32](uri_ref': Pointer[U8] tag, flags': U32, scheme': Pointer[Pointer[U8]] tag, user': Pointer[Pointer[U8]] tag, password': Pointer[Pointer[U8]] tag, auth_params': Pointer[Pointer[U8]] tag, host': Pointer[Pointer[U8]] tag, port': Pointer[I32] tag, path': Pointer[Pointer[U8]] tag, query': Pointer[Pointer[U8]] tag, fragment': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_unescape_bytes[GBytesT](escaped_string': Pointer[U8] tag, length': I64, illegal_characters': Pointer[U8] tag, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_unescape_segment[Pointer[U8] tag](escaped_string': Pointer[U8] tag, escaped_string_end': Pointer[U8] tag, illegal_characters': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_unescape_string[Pointer[U8] tag](escaped_string': Pointer[U8] tag, illegal_characters': Pointer[U8] tag)
test/GLib/GUriUse.pony:// use @g_uri_get_auth_params[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_flags[U32](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_fragment[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_host[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_password[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_path[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_port[I32](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_query[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_scheme[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_user[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_get_userinfo[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_parse_relative[GUriT](base_uri': GUriT, uri_ref': Pointer[U8] tag, flags': U32, error': Pointer[GErrorT])
test/GLib/GUriUse.pony:// use @g_uri_ref[GUriT](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_to_string[Pointer[U8] tag](uri': GUriT)
test/GLib/GUriUse.pony:// use @g_uri_to_string_partial[Pointer[U8] tag](uri': GUriT, flags': U32)
test/GLib/GUriUse.pony:// use @g_uri_unref[None](uri': GUriT)
test/GLib/GVariantBuilderUse.pony:use "lib:glib-2.0"
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_new[GVariantBuilderT](type': GVariantTypeT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_add[None](builder': GVariantBuilderT, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_add_parsed[None](builder': GVariantBuilderT, format': Pointer[U8] tag, ...)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_add_value[None](builder': GVariantBuilderT, value': GVariantT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_clear[None](builder': GVariantBuilderT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_close[None](builder': GVariantBuilderT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_end[GVariantT](builder': GVariantBuilderT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_init[None](builder': GVariantBuilderT, type': GVariantTypeT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_open[None](builder': GVariantBuilderT, type': GVariantTypeT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_ref[GVariantBuilderT](builder': GVariantBuilderT)
test/GLib/GVariantBuilderUse.pony:// use @g_variant_builder_unref[None](builder': GVariantBuilderT)
test/GLib/GVariantDictUse.pony:use "lib:glib-2.0"
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_new[GVariantDictT](from_asv': GVariantT)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_clear[None](dict': GVariantDictT)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_contains[I32](dict': GVariantDictT, key': Pointer[U8] tag)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_end[GVariantT](dict': GVariantDictT)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_init[None](dict': GVariantDictT, from_asv': GVariantT)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_insert[None](dict': GVariantDictT, key': Pointer[U8] tag, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_insert_value[None](dict': GVariantDictT, key': Pointer[U8] tag, value': GVariantT)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_lookup[I32](dict': GVariantDictT, key': Pointer[U8] tag, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_lookup_value[GVariantT](dict': GVariantDictT, key': Pointer[U8] tag, expected_type': GVariantTypeT)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_ref[GVariantDictT](dict': GVariantDictT)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_remove[I32](dict': GVariantDictT, key': Pointer[U8] tag)
test/GLib/GVariantDictUse.pony:// use @g_variant_dict_unref[None](dict': GVariantDictT)
test/GLib/GVariantIterUse.pony:use "lib:glib-2.0"
test/GLib/GVariantIterUse.pony:// use @g_variant_iter_copy[GVariantIterT](iter': GVariantIterT)
test/GLib/GVariantIterUse.pony:// use @g_variant_iter_free[None](iter': GVariantIterT)
test/GLib/GVariantIterUse.pony:// use @g_variant_iter_init[U64](iter': GVariantIterT, value': GVariantT)
test/GLib/GVariantIterUse.pony:// use @g_variant_iter_loop[I32](iter': GVariantIterT, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantIterUse.pony:// use @g_variant_iter_n_children[U64](iter': GVariantIterT)
test/GLib/GVariantIterUse.pony:// use @g_variant_iter_next[I32](iter': GVariantIterT, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantIterUse.pony:// use @g_variant_iter_next_value[GVariantT](iter': GVariantIterT)
test/GLib/GVariantTypeUse.pony:use "lib:glib-2.0"
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_checked_[GVariantTypeT](anon_24962: Pointer[U8] tag)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_string_get_depth_[U64](type_string': Pointer[U8] tag)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_string_is_valid[I32](type_string': Pointer[U8] tag)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_string_scan[I32](string': Pointer[U8] tag, limit': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_new[GVariantTypeT](type_string': Pointer[U8] tag)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_new_array[GVariantTypeT](element': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_new_dict_entry[GVariantTypeT](key': GVariantTypeT, value': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_new_maybe[GVariantTypeT](element': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_new_tuple[GVariantTypeT](items': Pointer[GVariantTypeT], length': I32)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_copy[GVariantTypeT](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_dup_string[Pointer[U8] tag](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_element[GVariantTypeT](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_equal[I32](type1': Pointer[None] tag, type2': Pointer[None] tag)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_first[GVariantTypeT](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_free[None](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_get_string_length[U64](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_hash[U32](type': Pointer[None] tag)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_array[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_basic[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_container[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_definite[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_dict_entry[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_maybe[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_subtype_of[I32](type': GVariantTypeT, supertype': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_tuple[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_is_variant[I32](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_key[GVariantTypeT](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_n_items[U64](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_next[GVariantTypeT](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_peek_string[Pointer[U8] tag](type': GVariantTypeT)
test/GLib/GVariantTypeUse.pony:// use @g_variant_type_value[GVariantTypeT](type': GVariantTypeT)
test/GLib/GVariantUse.pony:use "lib:glib-2.0"
test/GLib/GVariantUse.pony:// use @g_variant_is_object_path[I32](string': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_is_signature[I32](string': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_parse[GVariantT](type': GVariantTypeT, text': Pointer[U8] tag, limit': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
test/GLib/GVariantUse.pony:// use @g_variant_parse_error_print_context[Pointer[U8] tag](error': GErrorT, source_str': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_parse_error_quark[U32]()
test/GLib/GVariantUse.pony:// use @g_variant_parser_get_error_quark[U32]()
test/GLib/GVariantUse.pony:// use @g_variant_new[GVariantT](format_string': Pointer[U8] tag, ...)
test/GLib/GVariantUse.pony:// use @g_variant_new_array[GVariantT](child_type': GVariantTypeT, children': Pointer[GVariantT], n_children': U64)
test/GLib/GVariantUse.pony:// use @g_variant_new_boolean[GVariantT](value': I32)
test/GLib/GVariantUse.pony:// use @g_variant_new_byte[GVariantT](value': U8)
test/GLib/GVariantUse.pony:// use @g_variant_new_bytestring[GVariantT](string': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_new_bytestring_array[GVariantT](strv': Pointer[Pointer[U8]] tag, length': I64)
test/GLib/GVariantUse.pony:// use @g_variant_new_dict_entry[GVariantT](key': GVariantT, value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_new_double[GVariantT](value': F64)
test/GLib/GVariantUse.pony:// use @g_variant_new_fixed_array[GVariantT](element_type': GVariantTypeT, elements': Pointer[None] tag, n_elements': U64, element_size': U64)
test/GLib/GVariantUse.pony:// use @g_variant_new_from_bytes[GVariantT](type': GVariantTypeT, bytes': GBytesT, trusted': I32)
test/GLib/GVariantUse.pony:// use @g_variant_new_from_data[GVariantT](type': GVariantTypeT, data': Pointer[None] tag, size': U64, trusted': I32, notify': GDestroyNotify, user_data': Pointer[None] tag)
test/GLib/GVariantUse.pony:// use @g_variant_new_handle[GVariantT](value': I32)
test/GLib/GVariantUse.pony:// use @g_variant_new_int16[GVariantT](value': I16)
test/GLib/GVariantUse.pony:// use @g_variant_new_int32[GVariantT](value': I32)
test/GLib/GVariantUse.pony:// use @g_variant_new_int64[GVariantT](value': I64)
test/GLib/GVariantUse.pony:// use @g_variant_new_maybe[GVariantT](child_type': GVariantTypeT, child': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_new_object_path[GVariantT](object_path': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_new_objv[GVariantT](strv': Pointer[Pointer[U8]] tag, length': I64)
test/GLib/GVariantUse.pony:// use @g_variant_new_parsed[GVariantT](format': Pointer[U8] tag, ...)
test/GLib/GVariantUse.pony:// use @g_variant_new_printf[GVariantT](format_string': Pointer[U8] tag, ...)
test/GLib/GVariantUse.pony:// use @g_variant_new_signature[GVariantT](signature': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_new_string[GVariantT](string': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_new_strv[GVariantT](strv': Pointer[Pointer[U8]] tag, length': I64)
test/GLib/GVariantUse.pony:// use @g_variant_new_take_string[GVariantT](string': Pointer[U8] tag)
test/GLib/GVariantUse.pony:// use @g_variant_new_tuple[GVariantT](children': Pointer[GVariantT], n_children': U64)
test/GLib/GVariantUse.pony:// use @g_variant_new_uint16[GVariantT](value': U16)
test/GLib/GVariantUse.pony:// use @g_variant_new_uint32[GVariantT](value': U32)
test/GLib/GVariantUse.pony:// use @g_variant_new_uint64[GVariantT](value': U64)
test/GLib/GVariantUse.pony:// use @g_variant_new_variant[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_byteswap[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_check_format_string[I32](value': GVariantT, format_string': Pointer[U8] tag, copy_only': I32)
test/GLib/GVariantUse.pony:// use @g_variant_classify[U32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_compare[I32](one': Pointer[None] tag, two': Pointer[None] tag)
test/GLib/GVariantUse.pony:// use @g_variant_dup_bytestring[Pointer[U8] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_dup_bytestring_array[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_dup_objv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_dup_string[Pointer[U8] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_dup_strv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_equal[I32](one': Pointer[None] tag, two': Pointer[None] tag)
test/GLib/GVariantUse.pony:// use @g_variant_get[None](value': GVariantT, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantUse.pony:// use @g_variant_get_boolean[I32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_byte[U8](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_bytestring[Pointer[U8] tag](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_bytestring_array[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_get_child[None](value': GVariantT, index_': U64, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantUse.pony:// use @g_variant_get_child_value[GVariantT](value': GVariantT, index_': U64)
test/GLib/GVariantUse.pony:// use @g_variant_get_data[Pointer[None] tag](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_data_as_bytes[GBytesT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_double[F64](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_fixed_array[Pointer[None] tag](value': GVariantT, n_elements': Pointer[U64] tag, element_size': U64)
test/GLib/GVariantUse.pony:// use @g_variant_get_handle[I32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_int16[I16](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_int32[I32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_int64[I64](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_maybe[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_normal_form[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_objv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_get_size[U64](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_string[Pointer[U8] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_get_strv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
test/GLib/GVariantUse.pony:// use @g_variant_get_type[GVariantTypeT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_type_string[Pointer[U8] tag](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_uint16[U16](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_uint32[U32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_uint64[U64](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_get_variant[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_hash[U32](value': Pointer[None] tag)
test/GLib/GVariantUse.pony:// use @g_variant_is_container[I32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_is_floating[I32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_is_normal_form[I32](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_is_of_type[I32](value': GVariantT, type': GVariantTypeT)
test/GLib/GVariantUse.pony:// use @g_variant_iter_new[GVariantIterT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_lookup[I32](dictionary': GVariantT, key': Pointer[U8] tag, format_string': Pointer[U8] tag, ...)
test/GLib/GVariantUse.pony:// use @g_variant_lookup_value[GVariantT](dictionary': GVariantT, key': Pointer[U8] tag, expected_type': GVariantTypeT)
test/GLib/GVariantUse.pony:// use @g_variant_n_children[U64](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_print[Pointer[U8] tag](value': GVariantT, type_annotate': I32)
test/GLib/GVariantUse.pony:// use @g_variant_print_string[GStringT](value': GVariantT, string': GStringT, type_annotate': I32)
test/GLib/GVariantUse.pony:// use @g_variant_ref[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_ref_sink[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_store[None](value': GVariantT, data': Pointer[None] tag)
test/GLib/GVariantUse.pony:// use @g_variant_take_ref[GVariantT](value': GVariantT)
test/GLib/GVariantUse.pony:// use @g_variant_unref[None](value': GVariantT)
