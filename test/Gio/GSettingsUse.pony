
use "../P"
use "../GLib"
use "../GObject"
use "lib:gio-2.0"

// Static Functions
// use @g_settings_list_relocatable_schemas[Pointer[Pointer[U8]] tag]()
// use @g_settings_list_schemas[Pointer[Pointer[U8]] tag]()
// use @g_settings_sync[None]()
// use @g_settings_unbind[None](object': Pointer[None] tag, property': Pointer[U8] tag)

// Constructors
// use @g_settings_new[GSettingsT](schema_id': Pointer[U8] tag)
// use @g_settings_new_full[GSettingsT](schema': GSettingsSchemaT, backend': GSettingsBackendT, path': Pointer[U8] tag)
// use @g_settings_new_with_backend[GSettingsT](schema_id': Pointer[U8] tag, backend': GSettingsBackendT)
// use @g_settings_new_with_backend_and_path[GSettingsT](schema_id': Pointer[U8] tag, backend': GSettingsBackendT, path': Pointer[U8] tag)
// use @g_settings_new_with_path[GSettingsT](schema_id': Pointer[U8] tag, path': Pointer[U8] tag)

// Methods
// use @g_settings_apply[None](settings': GSettingsT)
// use @g_settings_bind[None](settings': GSettingsT, key': Pointer[U8] tag, object': Pointer[None] tag, property': Pointer[U8] tag, flags': U32)
// use @g_settings_bind_with_mapping[None](settings': GSettingsT, key': Pointer[U8] tag, object': Pointer[None] tag, property': Pointer[U8] tag, flags': U32, get_mapping': GSettingsBindGetMapping, set_mapping': GSettingsBindSetMapping, user_data': Pointer[None] tag, destroy': GDestroyNotify)
// use @g_settings_bind_writable[None](settings': GSettingsT, key': Pointer[U8] tag, object': Pointer[None] tag, property': Pointer[U8] tag, inverted': I32)
// use @g_settings_create_action[GActionT](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_delay[None](settings': GSettingsT)
// use @g_settings_get[None](settings': GSettingsT, key': Pointer[U8] tag, format': Pointer[U8] tag, ...)
// use @g_settings_get_boolean[I32](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_child[GSettingsT](settings': GSettingsT, name': Pointer[U8] tag)
// use @g_settings_get_default_value[GVariantT](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_double[F64](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_enum[I32](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_flags[U32](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_has_unapplied[I32](settings': GSettingsT)
// use @g_settings_get_int[I32](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_int64[I64](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_mapped[Pointer[None] tag](settings': GSettingsT, key': Pointer[U8] tag, mapping': GSettingsGetMapping, user_data': Pointer[None] tag)
// use @g_settings_get_range[GVariantT](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_string[Pointer[U8] tag](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_strv[Pointer[Pointer[U8]] tag](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_uint[U32](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_uint64[U64](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_user_value[GVariantT](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_get_value[GVariantT](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_is_writable[I32](settings': GSettingsT, name': Pointer[U8] tag)
// use @g_settings_list_children[Pointer[Pointer[U8]] tag](settings': GSettingsT)
// use @g_settings_list_keys[Pointer[Pointer[U8]] tag](settings': GSettingsT)
// use @g_settings_range_check[I32](settings': GSettingsT, key': Pointer[U8] tag, value': GVariantT)
// use @g_settings_reset[None](settings': GSettingsT, key': Pointer[U8] tag)
// use @g_settings_revert[None](settings': GSettingsT)
// use @g_settings_set[I32](settings': GSettingsT, key': Pointer[U8] tag, format': Pointer[U8] tag, ...)
// use @g_settings_set_boolean[I32](settings': GSettingsT, key': Pointer[U8] tag, value': I32)
// use @g_settings_set_double[I32](settings': GSettingsT, key': Pointer[U8] tag, value': F64)
// use @g_settings_set_enum[I32](settings': GSettingsT, key': Pointer[U8] tag, value': I32)
// use @g_settings_set_flags[I32](settings': GSettingsT, key': Pointer[U8] tag, value': U32)
// use @g_settings_set_int[I32](settings': GSettingsT, key': Pointer[U8] tag, value': I32)
// use @g_settings_set_int64[I32](settings': GSettingsT, key': Pointer[U8] tag, value': I64)
// use @g_settings_set_string[I32](settings': GSettingsT, key': Pointer[U8] tag, value': Pointer[U8] tag)
// use @g_settings_set_strv[I32](settings': GSettingsT, key': Pointer[U8] tag, value': Pointer[Pointer[U8]] tag)
// use @g_settings_set_uint[I32](settings': GSettingsT, key': Pointer[U8] tag, value': U32)
// use @g_settings_set_uint64[I32](settings': GSettingsT, key': Pointer[U8] tag, value': U64)
// use @g_settings_set_value[I32](settings': GSettingsT, key': Pointer[U8] tag, value': GVariantT)
