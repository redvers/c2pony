
use "../P"
use "lib:glib-2.0"

// Static Functions
// use @g_variant_is_object_path[I32](string': Pointer[U8] tag)
// use @g_variant_is_signature[I32](string': Pointer[U8] tag)
// use @g_variant_parse[GVariantT](type': GVariantTypeT, text': Pointer[U8] tag, limit': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
// use @g_variant_parse_error_print_context[Pointer[U8] tag](error': GErrorT, source_str': Pointer[U8] tag)
// use @g_variant_parse_error_quark[U32]()
// use @g_variant_parser_get_error_quark[U32]()

// Constructors
// use @g_variant_new[GVariantT](format_string': Pointer[U8] tag, ...)
// use @g_variant_new_array[GVariantT](child_type': GVariantTypeT, children': Pointer[GVariantT], n_children': U64)
// use @g_variant_new_boolean[GVariantT](value': I32)
// use @g_variant_new_byte[GVariantT](value': U8)
// use @g_variant_new_bytestring[GVariantT](string': Pointer[U8] tag)
// use @g_variant_new_bytestring_array[GVariantT](strv': Pointer[Pointer[U8]] tag, length': I64)
// use @g_variant_new_dict_entry[GVariantT](key': GVariantT, value': GVariantT)
// use @g_variant_new_double[GVariantT](value': F64)
// use @g_variant_new_fixed_array[GVariantT](element_type': GVariantTypeT, elements': Pointer[None] tag, n_elements': U64, element_size': U64)
// use @g_variant_new_from_bytes[GVariantT](type': GVariantTypeT, bytes': GBytesT, trusted': I32)
// use @g_variant_new_from_data[GVariantT](type': GVariantTypeT, data': Pointer[None] tag, size': U64, trusted': I32, notify': GDestroyNotify, user_data': Pointer[None] tag)
// use @g_variant_new_handle[GVariantT](value': I32)
// use @g_variant_new_int16[GVariantT](value': I16)
// use @g_variant_new_int32[GVariantT](value': I32)
// use @g_variant_new_int64[GVariantT](value': I64)
// use @g_variant_new_maybe[GVariantT](child_type': GVariantTypeT, child': GVariantT)
// use @g_variant_new_object_path[GVariantT](object_path': Pointer[U8] tag)
// use @g_variant_new_objv[GVariantT](strv': Pointer[Pointer[U8]] tag, length': I64)
// use @g_variant_new_parsed[GVariantT](format': Pointer[U8] tag, ...)
// use @g_variant_new_printf[GVariantT](format_string': Pointer[U8] tag, ...)
// use @g_variant_new_signature[GVariantT](signature': Pointer[U8] tag)
// use @g_variant_new_string[GVariantT](string': Pointer[U8] tag)
// use @g_variant_new_strv[GVariantT](strv': Pointer[Pointer[U8]] tag, length': I64)
// use @g_variant_new_take_string[GVariantT](string': Pointer[U8] tag)
// use @g_variant_new_tuple[GVariantT](children': Pointer[GVariantT], n_children': U64)
// use @g_variant_new_uint16[GVariantT](value': U16)
// use @g_variant_new_uint32[GVariantT](value': U32)
// use @g_variant_new_uint64[GVariantT](value': U64)
// use @g_variant_new_variant[GVariantT](value': GVariantT)

// Methods
// use @g_variant_byteswap[GVariantT](value': GVariantT)
// use @g_variant_check_format_string[I32](value': GVariantT, format_string': Pointer[U8] tag, copy_only': I32)
// use @g_variant_classify[U32](value': GVariantT)
// use @g_variant_compare[I32](one': Pointer[None] tag, two': Pointer[None] tag)
// use @g_variant_dup_bytestring[Pointer[U8] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_dup_bytestring_array[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_dup_objv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_dup_string[Pointer[U8] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_dup_strv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_equal[I32](one': Pointer[None] tag, two': Pointer[None] tag)
// use @g_variant_get[None](value': GVariantT, format_string': Pointer[U8] tag, ...)
// use @g_variant_get_boolean[I32](value': GVariantT)
// use @g_variant_get_byte[U8](value': GVariantT)
// use @g_variant_get_bytestring[Pointer[U8] tag](value': GVariantT)
// use @g_variant_get_bytestring_array[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_get_child[None](value': GVariantT, index_': U64, format_string': Pointer[U8] tag, ...)
// use @g_variant_get_child_value[GVariantT](value': GVariantT, index_': U64)
// use @g_variant_get_data[Pointer[None] tag](value': GVariantT)
// use @g_variant_get_data_as_bytes[GBytesT](value': GVariantT)
// use @g_variant_get_double[F64](value': GVariantT)
// use @g_variant_get_fixed_array[Pointer[None] tag](value': GVariantT, n_elements': Pointer[U64] tag, element_size': U64)
// use @g_variant_get_handle[I32](value': GVariantT)
// use @g_variant_get_int16[I16](value': GVariantT)
// use @g_variant_get_int32[I32](value': GVariantT)
// use @g_variant_get_int64[I64](value': GVariantT)
// use @g_variant_get_maybe[GVariantT](value': GVariantT)
// use @g_variant_get_normal_form[GVariantT](value': GVariantT)
// use @g_variant_get_objv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_get_size[U64](value': GVariantT)
// use @g_variant_get_string[Pointer[U8] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_get_strv[Pointer[Pointer[U8]] tag](value': GVariantT, length': Pointer[U64] tag)
// use @g_variant_get_type[GVariantTypeT](value': GVariantT)
// use @g_variant_get_type_string[Pointer[U8] tag](value': GVariantT)
// use @g_variant_get_uint16[U16](value': GVariantT)
// use @g_variant_get_uint32[U32](value': GVariantT)
// use @g_variant_get_uint64[U64](value': GVariantT)
// use @g_variant_get_variant[GVariantT](value': GVariantT)
// use @g_variant_hash[U32](value': Pointer[None] tag)
// use @g_variant_is_container[I32](value': GVariantT)
// use @g_variant_is_floating[I32](value': GVariantT)
// use @g_variant_is_normal_form[I32](value': GVariantT)
// use @g_variant_is_of_type[I32](value': GVariantT, type': GVariantTypeT)
// use @g_variant_iter_new[GVariantIterT](value': GVariantT)
// use @g_variant_lookup[I32](dictionary': GVariantT, key': Pointer[U8] tag, format_string': Pointer[U8] tag, ...)
// use @g_variant_lookup_value[GVariantT](dictionary': GVariantT, key': Pointer[U8] tag, expected_type': GVariantTypeT)
// use @g_variant_n_children[U64](value': GVariantT)
// use @g_variant_print[Pointer[U8] tag](value': GVariantT, type_annotate': I32)
// use @g_variant_print_string[GStringT](value': GVariantT, string': GStringT, type_annotate': I32)
// use @g_variant_ref[GVariantT](value': GVariantT)
// use @g_variant_ref_sink[GVariantT](value': GVariantT)
// use @g_variant_store[None](value': GVariantT, data': Pointer[None] tag)
// use @g_variant_take_ref[GVariantT](value': GVariantT)
// use @g_variant_unref[None](value': GVariantT)
