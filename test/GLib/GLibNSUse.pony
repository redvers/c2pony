
use "lib:glib-2.0"
use @g_atomic_pointer_get[Pointer[None] tag](atomic': Pointer[None] tag)
use @g_atomic_pointer_set[None](atomic': Pointer[None] tag, newval': Pointer[None] tag)
use @glib_check_version[Pointer[U8] tag](required_major': U32, required_minor': U32, required_micro': U32)
use @g_clear_error[None](err': Pointer[GErrorT])
use @g_clear_list[None](list_ptr': Pointer[GListT], destroy': GDestroyNotify)
use @g_clear_slist[None](slist_ptr': Pointer[GSListT], destroy': GDestroyNotify)
use @g_datalist_clear[None](datalist': Pointer[GDataT])
use @g_datalist_foreach[None](datalist': Pointer[GDataT], func': GDataForeachFunc, user_data': Pointer[None] tag)
use @g_datalist_get_data[Pointer[None] tag](datalist': Pointer[GDataT], key': Pointer[U8] tag)
use @g_datalist_get_flags[U32](datalist': Pointer[GDataT])
use @g_datalist_id_dup_data[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32, dup_func': GDuplicateFunc, user_data': Pointer[None] tag)
use @g_datalist_id_get_data[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32)
use @g_datalist_id_remove_no_notify[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32)
use @g_datalist_id_set_data_full[None](datalist': Pointer[GDataT], key_id': U32, data': Pointer[None] tag, destroy_func': GDestroyNotify)
use @g_datalist_init[None](datalist': Pointer[GDataT])
use @g_datalist_set_flags[None](datalist': Pointer[GDataT], flags': U32)
use @g_datalist_unset_flags[None](datalist': Pointer[GDataT], flags': U32)
use @g_dataset_destroy[None](dataset_location': Pointer[None] tag)
use @g_dataset_foreach[None](dataset_location': Pointer[None] tag, func': GDataForeachFunc, user_data': Pointer[None] tag)
use @g_dataset_id_get_data[Pointer[None] tag](dataset_location': Pointer[None] tag, key_id': U32)
use @g_dataset_id_remove_no_notify[Pointer[None] tag](dataset_location': Pointer[None] tag, key_id': U32)
use @g_dataset_id_set_data_full[None](dataset_location': Pointer[None] tag, key_id': U32, data': Pointer[None] tag, destroy_func': GDestroyNotify)
use @g_format_size[Pointer[U8] tag](size': U64)
use @g_format_size_full[Pointer[U8] tag](size': U64, flags': U32)
use @g_free[None](mem': Pointer[None] tag)
use @g_get_application_name[Pointer[U8] tag]()
use @g_hostname_is_ascii_encoded[I32](hostname': Pointer[U8] tag)
use @g_hostname_is_ip_address[I32](hostname': Pointer[U8] tag)
use @g_hostname_is_non_ascii[I32](hostname': Pointer[U8] tag)
use @g_hostname_to_ascii[Pointer[U8] tag](hostname': Pointer[U8] tag)
use @g_hostname_to_unicode[Pointer[U8] tag](hostname': Pointer[U8] tag)
use @g_log_default_handler[None](log_domain': Pointer[U8] tag, log_level': I32, message': Pointer[U8] tag, unused_data': Pointer[None] tag)
use @g_log_remove_handler[None](log_domain': Pointer[U8] tag, handler_id': U32)
use @g_log_set_always_fatal[I32](fatal_mask': I32)
use @g_log_set_default_handler[GLogFunc](log_func': GLogFunc, user_data': Pointer[None] tag)
use @g_log_set_fatal_mask[I32](log_domain': Pointer[U8] tag, fatal_mask': I32)
use @g_log_set_handler[U32](log_domain': Pointer[U8] tag, log_levels': I32, log_func': GLogFunc, user_data': Pointer[None] tag)
use @g_log_set_handler_full[U32](log_domain': Pointer[U8] tag, log_levels': I32, log_func': GLogFunc, user_data': Pointer[None] tag, destroy': GDestroyNotify)
use @g_log_variant[None](log_domain': Pointer[U8] tag, log_level': I32, fields': GVariantT)
use @g_log_writer_is_journald[I32](output_fd': I32)
use @g_main_current_source[GSourceT]()
use @g_main_depth[I32]()
use @g_nullify_pointer[None](nullify_location': Pointer[Pointer[None]] tag)
use @g_quark_from_static_string[U32](string': Pointer[U8] tag)
use @g_quark_from_string[U32](string': Pointer[U8] tag)
use @g_quark_to_string[Pointer[U8] tag](quark': U32)
use @g_quark_try_string[U32](string': Pointer[U8] tag)
use @g_ref_count_compare[I32](rc': Pointer[I32] tag, val': I32)
use @g_ref_count_dec[I32](rc': Pointer[I32] tag)
use @g_ref_count_inc[None](rc': Pointer[I32] tag)
use @g_ref_count_init[None](rc': Pointer[I32] tag)
use @g_ref_string_acquire[Pointer[U8] tag](str': Pointer[U8] tag)
use @g_ref_string_length[U64](str': Pointer[U8] tag)
use @g_ref_string_new[Pointer[U8] tag](str': Pointer[U8] tag)
use @g_ref_string_new_intern[Pointer[U8] tag](str': Pointer[U8] tag)
use @g_ref_string_new_len[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
use @g_ref_string_release[None](str': Pointer[U8] tag)
use @g_set_application_name[None](application_name': Pointer[U8] tag)
use @g_set_error_literal[None](err': Pointer[GErrorT], domain': U32, code': I32, message': Pointer[U8] tag)
use @g_variant_get_gtype[U64]()

type GDestroyNotify is @{(Pointer[None] tag): None}
type GDataForeachFunc is @{(U32, Pointer[None], Pointer[None]): None}
type GDuplicateFunc is @{(Pointer[None], Pointer[None]): Pointer[None]}
type GLogFunc is @{(Pointer[U8], U32, Pointer[U8], Pointer[None]): None}
type GCallback is @{(): None}
