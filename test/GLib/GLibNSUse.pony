
use "lib:glib-2.0"
// use @g_ascii_digit_value[I32](c': U8)
// use @g_ascii_dtostr[Pointer[U8] tag](buffer': Pointer[U8] tag, buf_len': I32, d': F64)
// use @g_ascii_formatd[Pointer[U8] tag](buffer': Pointer[U8] tag, buf_len': I32, format': Pointer[U8] tag, d': F64)
// use @g_ascii_strcasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag)
// use @g_ascii_strdown[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_ascii_string_to_signed[I32](str': Pointer[U8] tag, base': U32, min': I64, max': I64, out_num': Pointer[I64] tag, error': Pointer[GErrorT])
// use @g_ascii_string_to_unsigned[I32](str': Pointer[U8] tag, base': U32, min': U64, max': U64, out_num': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_ascii_strncasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag, n': U64)
// use @g_ascii_strtod[F64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag)
// use @g_ascii_strtoll[I64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag, base': U32)
// use @g_ascii_strtoull[U64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag, base': U32)
// use @g_ascii_strup[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_ascii_tolower[U8](c': U8)
// use @g_ascii_toupper[U8](c': U8)
// use @g_ascii_xdigit_value[I32](c': U8)
// use @g_assert_warning[None](log_domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, pretty_function': Pointer[U8] tag, expression': Pointer[U8] tag)
// use @g_assertion_message[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, message': Pointer[U8] tag)
// use @g_assertion_message_cmpnum[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag, arg1': I128, cmp': Pointer[U8] tag, arg2': I128, numtype': U8)
// use @g_assertion_message_cmpstr[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag, arg1': Pointer[U8] tag, cmp': Pointer[U8] tag, arg2': Pointer[U8] tag)
// use @g_assertion_message_error[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag, error': GErrorT, error_domain': U32, error_code': I32)
// use @g_assertion_message_expr[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, expr': Pointer[U8] tag)
// use @g_atexit[None](func': GVoidFunc)
// use @g_atomic_int_add[I32](atomic': Pointer[I32] tag, val': I32)
// use @g_atomic_int_and[U32](atomic': Pointer[U32] tag, val': U32)
// use @g_atomic_int_compare_and_exchange[I32](atomic': Pointer[I32] tag, oldval': I32, newval': I32)
// use @g_atomic_int_dec_and_test[I32](atomic': Pointer[I32] tag)
// use @g_atomic_int_exchange_and_add[I32](atomic': Pointer[I32] tag, val': I32)
// use @g_atomic_int_get[I32](atomic': Pointer[I32] tag)
// use @g_atomic_int_inc[None](atomic': Pointer[I32] tag)
// use @g_atomic_int_or[U32](atomic': Pointer[U32] tag, val': U32)
// use @g_atomic_int_set[None](atomic': Pointer[I32] tag, newval': I32)
// use @g_atomic_int_xor[U32](atomic': Pointer[U32] tag, val': U32)
// use @g_atomic_pointer_add[I64](atomic': Pointer[None] tag, val': I64)
// use @g_atomic_pointer_and[U64](atomic': Pointer[None] tag, val': U64)
// use @g_atomic_pointer_compare_and_exchange[I32](atomic': Pointer[None] tag, oldval': Pointer[None] tag, newval': Pointer[None] tag)
// use @g_atomic_pointer_get[Pointer[None] tag](atomic': Pointer[None] tag)
// use @g_atomic_pointer_or[U64](atomic': Pointer[None] tag, val': U64)
// use @g_atomic_pointer_set[None](atomic': Pointer[None] tag, newval': Pointer[None] tag)
// use @g_atomic_pointer_xor[U64](atomic': Pointer[None] tag, val': U64)
// use @g_atomic_rc_box_acquire[Pointer[None] tag](mem_block': Pointer[None] tag)
// use @g_atomic_rc_box_alloc[Pointer[None] tag](block_size': U64)
// use @g_atomic_rc_box_alloc0[Pointer[None] tag](block_size': U64)
// use @g_atomic_rc_box_dup[Pointer[None] tag](block_size': U64, mem_block': Pointer[None] tag)
// use @g_atomic_rc_box_get_size[U64](mem_block': Pointer[None] tag)
// use @g_atomic_rc_box_release[None](mem_block': Pointer[None] tag)
// use @g_atomic_rc_box_release_full[None](mem_block': Pointer[None] tag, clear_func': GDestroyNotify)
// use @g_atomic_ref_count_compare[I32](arc': Pointer[I32] tag, val': I32)
// use @g_atomic_ref_count_dec[I32](arc': Pointer[I32] tag)
// use @g_atomic_ref_count_inc[None](arc': Pointer[I32] tag)
// use @g_atomic_ref_count_init[None](arc': Pointer[I32] tag)
// use @g_base64_decode[Pointer[U8] tag](text': Pointer[U8] tag, out_len': Pointer[U64] tag)
// use @g_base64_decode_inplace[Pointer[U8] tag](text': Pointer[U8] tag, out_len': Pointer[U64] tag)
// use @g_base64_decode_step[U64](in': Pointer[U8] tag, len': U64, out': Pointer[U8] tag, state': Pointer[I32] tag, save': Pointer[U32] tag)
// use @g_base64_encode[Pointer[U8] tag](data': Pointer[U8] tag, len': U64)
// use @g_base64_encode_close[U64](break_lines': I32, out': Pointer[U8] tag, state': Pointer[I32] tag, save': Pointer[I32] tag)
// use @g_base64_encode_step[U64](in': Pointer[U8] tag, len': U64, break_lines': I32, out': Pointer[U8] tag, state': Pointer[I32] tag, save': Pointer[I32] tag)
// use @g_basename[Pointer[U8] tag](file_name': Pointer[U8] tag)
// use @g_bit_lock[None](address': Pointer[I32] tag, lock_bit': I32)
// use @g_bit_nth_lsf[I32](mask': U64, nth_bit': I32)
// use @g_bit_nth_msf[I32](mask': U64, nth_bit': I32)
// use @g_bit_storage[U32](number': U64)
// use @g_bit_trylock[I32](address': Pointer[I32] tag, lock_bit': I32)
// use @g_bit_unlock[None](address': Pointer[I32] tag, lock_bit': I32)
// use @g_build_filename[Pointer[U8] tag](first_element': Pointer[U8] tag, ...)
// use @g_build_filenamev[Pointer[U8] tag](args': Pointer[Pointer[U8]] tag)
// use @g_build_path[Pointer[U8] tag](separator': Pointer[U8] tag, first_element': Pointer[U8] tag, ...)
// use @g_build_pathv[Pointer[U8] tag](separator': Pointer[U8] tag, args': Pointer[Pointer[U8]] tag)
// use @g_canonicalize_filename[Pointer[U8] tag](filename': Pointer[U8] tag, relative_to': Pointer[U8] tag)
// use @glib_check_version[Pointer[U8] tag](required_major': U32, required_minor': U32, required_micro': U32)
// use @g_child_watch_add[U32](pid': I32, function': GChildWatchFunc, data': Pointer[None] tag)
// use @g_child_watch_add_full[U32](priority': I32, pid': I32, function': GChildWatchFunc, data': Pointer[None] tag, notify': GDestroyNotify)
// use @g_child_watch_source_new[GSourceT](pid': I32)
// use @g_clear_error[None](err': Pointer[GErrorT])
// use @g_clear_handle_id[None](tag_ptr': Pointer[U32] tag, clear_func': GClearHandleFunc)
// use @g_clear_list[None](list_ptr': Pointer[GListT], destroy': GDestroyNotify)
// use @g_clear_pointer[None](pp': Pointer[Pointer[None]] tag, destroy': GDestroyNotify)
// use @g_clear_slist[None](slist_ptr': Pointer[GSListT], destroy': GDestroyNotify)
// use @g_compute_checksum_for_bytes[Pointer[U8] tag](checksum_type': U32, data': GBytesT)
// use @g_compute_checksum_for_data[Pointer[U8] tag](checksum_type': U32, data': Pointer[U8] tag, length': U64)
// use @g_compute_checksum_for_string[Pointer[U8] tag](checksum_type': U32, str': Pointer[U8] tag, length': I64)
// use @g_compute_hmac_for_bytes[Pointer[U8] tag](digest_type': U32, key': GBytesT, data': GBytesT)
// use @g_compute_hmac_for_data[Pointer[U8] tag](digest_type': U32, key': Pointer[U8] tag, key_len': U64, data': Pointer[U8] tag, length': U64)
// use @g_compute_hmac_for_string[Pointer[U8] tag](digest_type': U32, key': Pointer[U8] tag, key_len': U64, str': Pointer[U8] tag, length': I64)
// use @g_convert[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, to_codeset': Pointer[U8] tag, from_codeset': Pointer[U8] tag, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_convert_error_quark[U32]()
// use @g_convert_with_fallback[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, to_codeset': Pointer[U8] tag, from_codeset': Pointer[U8] tag, fallback': Pointer[U8] tag, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_convert_with_iconv[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, converter': GIConvT, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_datalist_clear[None](datalist': Pointer[GDataT])
// use @g_datalist_foreach[None](datalist': Pointer[GDataT], func': GDataForeachFunc, user_data': Pointer[None] tag)
// use @g_datalist_get_data[Pointer[None] tag](datalist': Pointer[GDataT], key': Pointer[U8] tag)
// use @g_datalist_get_flags[U32](datalist': Pointer[GDataT])
// use @g_datalist_id_dup_data[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32, dup_func': GDuplicateFunc, user_data': Pointer[None] tag)
// use @g_datalist_id_get_data[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32)
// use @g_datalist_id_remove_no_notify[Pointer[None] tag](datalist': Pointer[GDataT], key_id': U32)
// use @g_datalist_id_set_data_full[None](datalist': Pointer[GDataT], key_id': U32, data': Pointer[None] tag, destroy_func': GDestroyNotify)
// use @g_datalist_init[None](datalist': Pointer[GDataT])
// use @g_datalist_set_flags[None](datalist': Pointer[GDataT], flags': U32)
// use @g_datalist_unset_flags[None](datalist': Pointer[GDataT], flags': U32)
// use @g_dataset_destroy[None](dataset_location': Pointer[None] tag)
// use @g_dataset_foreach[None](dataset_location': Pointer[None] tag, func': GDataForeachFunc, user_data': Pointer[None] tag)
// use @g_dataset_id_get_data[Pointer[None] tag](dataset_location': Pointer[None] tag, key_id': U32)
// use @g_dataset_id_remove_no_notify[Pointer[None] tag](dataset_location': Pointer[None] tag, key_id': U32)
// use @g_dataset_id_set_data_full[None](dataset_location': Pointer[None] tag, key_id': U32, data': Pointer[None] tag, destroy_func': GDestroyNotify)
// use @g_dcgettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgid': Pointer[U8] tag, category': I32)
// use @g_dgettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgid': Pointer[U8] tag)
// use @g_direct_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
// use @g_direct_hash[U32](v': Pointer[None] tag)
// use @g_dngettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgid': Pointer[U8] tag, msgid_plural': Pointer[U8] tag, n': U64)
// use @g_double_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
// use @g_double_hash[U32](v': Pointer[None] tag)
// use @g_dpgettext[Pointer[U8] tag](domain': Pointer[U8] tag, msgctxtid': Pointer[U8] tag, msgidoffset': U64)
// use @g_dpgettext2[Pointer[U8] tag](domain': Pointer[U8] tag, context': Pointer[U8] tag, msgid': Pointer[U8] tag)
// use @g_environ_getenv[Pointer[U8] tag](envp': Pointer[Pointer[U8]] tag, variable': Pointer[U8] tag)
// use @g_environ_setenv[Pointer[Pointer[U8]] tag](envp': Pointer[Pointer[U8]] tag, variable': Pointer[U8] tag, value': Pointer[U8] tag, overwrite': I32)
// use @g_environ_unsetenv[Pointer[Pointer[U8]] tag](envp': Pointer[Pointer[U8]] tag, variable': Pointer[U8] tag)
// use @g_file_error_from_errno[U32](err_no': I32)
// use @g_file_error_quark[U32]()
// use @g_file_get_contents[I32](filename': Pointer[U8] tag, contents': Pointer[Pointer[U8]] tag, length': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_file_open_tmp[I32](tmpl': Pointer[U8] tag, name_used': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
// use @g_file_read_link[Pointer[U8] tag](filename': Pointer[U8] tag, error': Pointer[GErrorT])
// use @g_file_set_contents[I32](filename': Pointer[U8] tag, contents': Pointer[U8] tag, length': I64, error': Pointer[GErrorT])
// use @g_file_set_contents_full[I32](filename': Pointer[U8] tag, contents': Pointer[U8] tag, length': I64, flags': U32, mode': I32, error': Pointer[GErrorT])
// use @g_file_test[I32](filename': Pointer[U8] tag, test': U32)
// use @g_filename_display_basename[Pointer[U8] tag](filename': Pointer[U8] tag)
// use @g_filename_display_name[Pointer[U8] tag](filename': Pointer[U8] tag)
// use @g_filename_from_uri[Pointer[U8] tag](uri': Pointer[U8] tag, hostname': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT])
// use @g_filename_from_utf8[Pointer[U8] tag](utf8string': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_filename_to_uri[Pointer[U8] tag](filename': Pointer[U8] tag, hostname': Pointer[U8] tag, error': Pointer[GErrorT])
// use @g_filename_to_utf8[Pointer[U8] tag](opsysstring': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_find_program_in_path[Pointer[U8] tag](program': Pointer[U8] tag)
// use @g_format_size[Pointer[U8] tag](size': U64)
// use @g_format_size_for_display[Pointer[U8] tag](size': I64)
// use @g_format_size_full[Pointer[U8] tag](size': U64, flags': U32)
// use @g_free[None](mem': Pointer[None] tag)
// use @g_get_application_name[Pointer[U8] tag]()
// use @g_get_charset[I32](charset': Pointer[Pointer[U8]] tag)
// use @g_get_codeset[Pointer[U8] tag]()
// use @g_get_console_charset[I32](charset': Pointer[Pointer[U8]] tag)
// use @g_get_current_dir[Pointer[U8] tag]()
// use @g_get_current_time[None](result': GTimeValT)
// use @g_get_environ[Pointer[Pointer[U8]] tag]()
// use @g_get_filename_charsets[I32](filename_charsets': Pointer[Pointer[Pointer[U8]]] tag)
// use @g_get_home_dir[Pointer[U8] tag]()
// use @g_get_host_name[Pointer[U8] tag]()
// use @g_get_language_names[Pointer[Pointer[U8]] tag]()
// use @g_get_language_names_with_category[Pointer[Pointer[U8]] tag](category_name': Pointer[U8] tag)
// use @g_get_locale_variants[Pointer[Pointer[U8]] tag](locale': Pointer[U8] tag)
// use @g_get_monotonic_time[I64]()
// use @g_get_num_processors[U32]()
// use @g_get_os_info[Pointer[U8] tag](key_name': Pointer[U8] tag)
// use @g_get_prgname[Pointer[U8] tag]()
// use @g_get_real_name[Pointer[U8] tag]()
// use @g_get_real_time[I64]()
// use @g_get_system_config_dirs[Pointer[Pointer[U8]] tag]()
// use @g_get_system_data_dirs[Pointer[Pointer[U8]] tag]()
// use @g_get_tmp_dir[Pointer[U8] tag]()
// use @g_get_user_cache_dir[Pointer[U8] tag]()
// use @g_get_user_config_dir[Pointer[U8] tag]()
// use @g_get_user_data_dir[Pointer[U8] tag]()
// use @g_get_user_name[Pointer[U8] tag]()
// use @g_get_user_runtime_dir[Pointer[U8] tag]()
// use @g_get_user_special_dir[Pointer[U8] tag](directory': U32)
// use @g_getenv[Pointer[U8] tag](variable': Pointer[U8] tag)
// use @g_hostname_is_ascii_encoded[I32](hostname': Pointer[U8] tag)
// use @g_hostname_is_ip_address[I32](hostname': Pointer[U8] tag)
// use @g_hostname_is_non_ascii[I32](hostname': Pointer[U8] tag)
// use @g_hostname_to_ascii[Pointer[U8] tag](hostname': Pointer[U8] tag)
// use @g_hostname_to_unicode[Pointer[U8] tag](hostname': Pointer[U8] tag)
// use @g_iconv[U64](converter': GIConvT, inbuf': Pointer[Pointer[U8]] tag, inbytes_left': Pointer[U64] tag, outbuf': Pointer[Pointer[U8]] tag, outbytes_left': Pointer[U64] tag)
// use @g_idle_add[U32](function': GSourceFunc, data': Pointer[None] tag)
// use @g_idle_add_full[U32](priority': I32, function': GSourceFunc, data': Pointer[None] tag, notify': GDestroyNotify)
// use @g_idle_remove_by_data[I32](data': Pointer[None] tag)
// use @g_idle_source_new[GSourceT]()
// use @g_int64_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
// use @g_int64_hash[U32](v': Pointer[None] tag)
// use @g_int_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
// use @g_int_hash[U32](v': Pointer[None] tag)
// use @g_intern_static_string[Pointer[U8] tag](string': Pointer[U8] tag)
// use @g_intern_string[Pointer[U8] tag](string': Pointer[U8] tag)
// use @g_io_add_watch[U32](channel': GIOChannelT, condition': U32, func': GIOFunc, user_data': Pointer[None] tag)
// use @g_io_add_watch_full[U32](channel': GIOChannelT, priority': I32, condition': U32, func': GIOFunc, user_data': Pointer[None] tag, notify': GDestroyNotify)
// use @g_io_create_watch[GSourceT](channel': GIOChannelT, condition': U32)
// use @g_listenv[Pointer[Pointer[U8]] tag]()
// use @g_locale_from_utf8[Pointer[U8] tag](utf8string': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_locale_to_utf8[Pointer[U8] tag](opsysstring': Pointer[U8] tag, len': I64, bytes_read': Pointer[U64] tag, bytes_written': Pointer[U64] tag, error': Pointer[GErrorT])
// use @g_log[None](log_domain': Pointer[U8] tag, log_level': I32, format': Pointer[U8] tag, ...)
// use @g_log_default_handler[None](log_domain': Pointer[U8] tag, log_level': I32, message': Pointer[U8] tag, unused_data': Pointer[None] tag)
// use @g_log_remove_handler[None](log_domain': Pointer[U8] tag, handler_id': U32)
// use @g_log_set_always_fatal[I32](fatal_mask': I32)
// use @g_log_set_default_handler[GLogFunc](log_func': GLogFunc, user_data': Pointer[None] tag)
// use @g_log_set_fatal_mask[I32](log_domain': Pointer[U8] tag, fatal_mask': I32)
// use @g_log_set_handler[U32](log_domain': Pointer[U8] tag, log_levels': I32, log_func': GLogFunc, user_data': Pointer[None] tag)
// use @g_log_set_handler_full[U32](log_domain': Pointer[U8] tag, log_levels': I32, log_func': GLogFunc, user_data': Pointer[None] tag, destroy': GDestroyNotify)
// use @g_log_set_writer_func[None](func': GLogWriterFunc, user_data': Pointer[None] tag, user_data_free': GDestroyNotify)
// use @g_log_structured[None](log_domain': Pointer[U8] tag, log_level': I32, ...)
// use @g_log_structured_array[None](log_level': I32, fields': GLogFieldT, n_fields': U64)
// use @g_log_structured_standard[None](log_domain': Pointer[U8] tag, log_level': I32, file': Pointer[U8] tag, line': Pointer[U8] tag, func': Pointer[U8] tag, message_format': Pointer[U8] tag, ...)
// use @g_log_variant[None](log_domain': Pointer[U8] tag, log_level': I32, fields': GVariantT)
// use @g_log_writer_default[U32](log_level': I32, fields': GLogFieldT, n_fields': U64, user_data': Pointer[None] tag)
// use @g_log_writer_format_fields[Pointer[U8] tag](log_level': I32, fields': GLogFieldT, n_fields': U64, use_color': I32)
// use @g_log_writer_is_journald[I32](output_fd': I32)
// use @g_log_writer_journald[U32](log_level': I32, fields': GLogFieldT, n_fields': U64, user_data': Pointer[None] tag)
// use @g_log_writer_standard_streams[U32](log_level': I32, fields': GLogFieldT, n_fields': U64, user_data': Pointer[None] tag)
// use @g_log_writer_supports_color[I32](output_fd': I32)
// use @g_logv[None](log_domain': Pointer[U8] tag, log_level': I32, format': Pointer[U8] tag, args': valisttagT)
// use @g_main_current_source[GSourceT]()
// use @g_main_depth[I32]()
// use @g_malloc[Pointer[None] tag](n_bytes': U64)
// use @g_malloc0[Pointer[None] tag](n_bytes': U64)
// use @g_malloc0_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
// use @g_malloc_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
// use @g_markup_collect_attributes[I32](element_name': Pointer[U8] tag, attribute_names': Pointer[Pointer[U8]] tag, attribute_values': Pointer[Pointer[U8]] tag, error': Pointer[GErrorT], first_type': U32, first_attr': Pointer[U8] tag, ...)
// use @g_markup_error_quark[U32]()
// use @g_markup_escape_text[Pointer[U8] tag](text': Pointer[U8] tag, length': I64)
// use @g_markup_printf_escaped[Pointer[U8] tag](format': Pointer[U8] tag, ...)
// use @g_markup_vprintf_escaped[Pointer[U8] tag](format': Pointer[U8] tag, args': valisttagT)
// use @g_mem_profile[None]()
// use @g_mem_set_vtable[None](vtable': GMemVTableT)
// use @g_memdup[Pointer[None] tag](mem': Pointer[None] tag, byte_size': U32)
// use @g_mkdir_with_parents[I32](pathname': Pointer[U8] tag, mode': I32)
// use @g_mkdtemp[Pointer[U8] tag](tmpl': Pointer[U8] tag)
// use @g_mkdtemp_full[Pointer[U8] tag](tmpl': Pointer[U8] tag, mode': I32)
// use @g_mkstemp[I32](tmpl': Pointer[U8] tag)
// use @g_mkstemp_full[I32](tmpl': Pointer[U8] tag, flags': I32, mode': I32)
// use @g_nullify_pointer[None](nullify_location': Pointer[Pointer[None]] tag)
// use @g_number_parser_error_quark[U32]()
// use @g_on_error_query[None](prg_name': Pointer[U8] tag)
// use @g_on_error_stack_trace[None](prg_name': Pointer[U8] tag)
// use @g_option_error_quark[U32]()
// use @g_parse_debug_string[U32](string': Pointer[U8] tag, keys': GDebugKeyT, nkeys': U32)
// use @g_path_get_basename[Pointer[U8] tag](file_name': Pointer[U8] tag)
// use @g_path_get_dirname[Pointer[U8] tag](file_name': Pointer[U8] tag)
// use @g_path_is_absolute[I32](file_name': Pointer[U8] tag)
// use @g_path_skip_root[Pointer[U8] tag](file_name': Pointer[U8] tag)
// use @g_pattern_match[I32](pspec': GPatternSpecT, string_length': U32, string': Pointer[U8] tag, string_reversed': Pointer[U8] tag)
// use @g_pattern_match_simple[I32](pattern': Pointer[U8] tag, string': Pointer[U8] tag)
// use @g_pattern_match_string[I32](pspec': GPatternSpecT, string': Pointer[U8] tag)
// use @g_pointer_bit_lock[None](address': Pointer[None] tag, lock_bit': I32)
// use @g_pointer_bit_trylock[I32](address': Pointer[None] tag, lock_bit': I32)
// use @g_pointer_bit_unlock[None](address': Pointer[None] tag, lock_bit': I32)
// use @g_poll[I32](fds': GPollFDT, nfds': U32, timeout': I32)
// use @g_prefix_error[None](err': Pointer[GErrorT], format': Pointer[U8] tag, ...)
// use @g_print[None](format': Pointer[U8] tag, ...)
// use @g_printerr[None](format': Pointer[U8] tag, ...)
// use @g_printf_string_upper_bound[U64](format': Pointer[U8] tag, args': valisttagT)
// use @g_propagate_error[None](dest': Pointer[GErrorT], src': GErrorT)
// use @g_propagate_prefixed_error[None](dest': Pointer[GErrorT], src': GErrorT, format': Pointer[U8] tag, ...)
// use @g_qsort_with_data[None](pbase': Pointer[None] tag, total_elems': I32, size': U64, compare_func': GCompareDataFunc, user_data': Pointer[None] tag)
// use @g_quark_from_static_string[U32](string': Pointer[U8] tag)
// use @g_quark_from_string[U32](string': Pointer[U8] tag)
// use @g_quark_to_string[Pointer[U8] tag](quark': U32)
// use @g_quark_try_string[U32](string': Pointer[U8] tag)
// use @g_random_double[F64]()
// use @g_random_double_range[F64](begin': F64, end': F64)
// use @g_random_int[U32]()
// use @g_random_int_range[I32](begin': I32, end': I32)
// use @g_random_set_seed[None](seed': U32)
// use @g_rc_box_acquire[Pointer[None] tag](mem_block': Pointer[None] tag)
// use @g_rc_box_alloc[Pointer[None] tag](block_size': U64)
// use @g_rc_box_alloc0[Pointer[None] tag](block_size': U64)
// use @g_rc_box_dup[Pointer[None] tag](block_size': U64, mem_block': Pointer[None] tag)
// use @g_rc_box_get_size[U64](mem_block': Pointer[None] tag)
// use @g_rc_box_release[None](mem_block': Pointer[None] tag)
// use @g_rc_box_release_full[None](mem_block': Pointer[None] tag, clear_func': GDestroyNotify)
// use @g_realloc[Pointer[None] tag](mem': Pointer[None] tag, n_bytes': U64)
// use @g_realloc_n[Pointer[None] tag](mem': Pointer[None] tag, n_blocks': U64, n_block_bytes': U64)
// use @g_ref_count_compare[I32](rc': Pointer[I32] tag, val': I32)
// use @g_ref_count_dec[I32](rc': Pointer[I32] tag)
// use @g_ref_count_inc[None](rc': Pointer[I32] tag)
// use @g_ref_count_init[None](rc': Pointer[I32] tag)
// use @g_ref_string_acquire[Pointer[U8] tag](str': Pointer[U8] tag)
// use @g_ref_string_length[U64](str': Pointer[U8] tag)
// use @g_ref_string_new[Pointer[U8] tag](str': Pointer[U8] tag)
// use @g_ref_string_new_intern[Pointer[U8] tag](str': Pointer[U8] tag)
// use @g_ref_string_new_len[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_ref_string_release[None](str': Pointer[U8] tag)
// use @g_reload_user_special_dirs_cache[None]()
// use @g_return_if_fail_warning[None](log_domain': Pointer[U8] tag, pretty_function': Pointer[U8] tag, expression': Pointer[U8] tag)
// use @g_set_application_name[None](application_name': Pointer[U8] tag)
// use @g_set_error[None](err': Pointer[GErrorT], domain': U32, code': I32, format': Pointer[U8] tag, ...)
// use @g_set_error_literal[None](err': Pointer[GErrorT], domain': U32, code': I32, message': Pointer[U8] tag)
// use @g_set_prgname[None](prgname': Pointer[U8] tag)
// use @g_set_print_handler[GPrintFunc](func': GPrintFunc)
// use @g_set_printerr_handler[GPrintFunc](func': GPrintFunc)
// use @g_setenv[I32](variable': Pointer[U8] tag, value': Pointer[U8] tag, overwrite': I32)
// use @g_shell_error_quark[U32]()
// use @g_shell_parse_argv[I32](command_line': Pointer[U8] tag, argcp': Pointer[I32] tag, argvp': Pointer[Pointer[Pointer[U8]]] tag, error': Pointer[GErrorT])
// use @g_shell_quote[Pointer[U8] tag](unquoted_string': Pointer[U8] tag)
// use @g_shell_unquote[Pointer[U8] tag](quoted_string': Pointer[U8] tag, error': Pointer[GErrorT])
// use @g_slice_alloc[Pointer[None] tag](block_size': U64)
// use @g_slice_alloc0[Pointer[None] tag](block_size': U64)
// use @g_slice_copy[Pointer[None] tag](block_size': U64, mem_block': Pointer[None] tag)
// use @g_slice_free1[None](block_size': U64, mem_block': Pointer[None] tag)
// use @g_slice_free_chain_with_offset[None](block_size': U64, mem_chain': Pointer[None] tag, next_offset': U64)
// use @g_slice_get_config[I64](ckey': U32)
// use @g_slice_get_config_state[Pointer[I64] tag](ckey': U32, address': I64, n_values': Pointer[U32] tag)
// use @g_slice_set_config[None](ckey': U32, value': I64)
// use @g_snprintf[I32](string': Pointer[U8] tag, n': U64, format': Pointer[U8] tag, ...)
// use @g_spaced_primes_closest[U32](num': U32)
// use @g_spawn_async[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, child_pid': Pointer[I32] tag, error': Pointer[GErrorT])
// use @g_spawn_async_with_fds[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, child_pid': Pointer[I32] tag, stdin_fd': I32, stdout_fd': I32, stderr_fd': I32, error': Pointer[GErrorT])
// use @g_spawn_async_with_pipes[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, child_pid': Pointer[I32] tag, standard_input': Pointer[I32] tag, standard_output': Pointer[I32] tag, standard_error': Pointer[I32] tag, error': Pointer[GErrorT])
// use @g_spawn_check_exit_status[I32](wait_status': I32, error': Pointer[GErrorT])
// use @g_spawn_close_pid[None](pid': I32)
// use @g_spawn_command_line_async[I32](command_line': Pointer[U8] tag, error': Pointer[GErrorT])
// use @g_spawn_command_line_sync[I32](command_line': Pointer[U8] tag, standard_output': Pointer[Pointer[U8]] tag, standard_error': Pointer[Pointer[U8]] tag, wait_status': Pointer[I32] tag, error': Pointer[GErrorT])
// use @g_spawn_error_quark[U32]()
// use @g_spawn_exit_error_quark[U32]()
// use @g_spawn_sync[I32](working_directory': Pointer[U8] tag, argv': Pointer[Pointer[U8]] tag, envp': Pointer[Pointer[U8]] tag, flags': U32, child_setup': GSpawnChildSetupFunc, user_data': Pointer[None] tag, standard_output': Pointer[Pointer[U8]] tag, standard_error': Pointer[Pointer[U8]] tag, wait_status': Pointer[I32] tag, error': Pointer[GErrorT])
// use @g_stpcpy[Pointer[U8] tag](dest': Pointer[U8] tag, src': Pointer[U8] tag)
// use @g_str_equal[I32](v1': Pointer[None] tag, v2': Pointer[None] tag)
// use @g_str_has_prefix[I32](str': Pointer[U8] tag, prefix': Pointer[U8] tag)
// use @g_str_has_suffix[I32](str': Pointer[U8] tag, suffix': Pointer[U8] tag)
// use @g_str_hash[U32](v': Pointer[None] tag)
// use @g_str_is_ascii[I32](str': Pointer[U8] tag)
// use @g_str_match_string[I32](search_term': Pointer[U8] tag, potential_hit': Pointer[U8] tag, accept_alternates': I32)
// use @g_str_to_ascii[Pointer[U8] tag](str': Pointer[U8] tag, from_locale': Pointer[U8] tag)
// use @g_str_tokenize_and_fold[Pointer[Pointer[U8]] tag](string': Pointer[U8] tag, translit_locale': Pointer[U8] tag, ascii_alternates': Pointer[Pointer[Pointer[U8]]] tag)
// use @g_strcanon[Pointer[U8] tag](string': Pointer[U8] tag, valid_chars': Pointer[U8] tag, substitutor': U8)
// use @g_strcasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag)
// use @g_strchomp[Pointer[U8] tag](string': Pointer[U8] tag)
// use @g_strchug[Pointer[U8] tag](string': Pointer[U8] tag)
// use @g_strcmp0[I32](str1': Pointer[U8] tag, str2': Pointer[U8] tag)
// use @g_strcompress[Pointer[U8] tag](source': Pointer[U8] tag)
// use @g_strconcat[Pointer[U8] tag](string1': Pointer[U8] tag, ...)
// use @g_strdelimit[Pointer[U8] tag](string': Pointer[U8] tag, delimiters': Pointer[U8] tag, new_delimiter': U8)
// use @g_strdown[Pointer[U8] tag](string': Pointer[U8] tag)
// use @g_strdup[Pointer[U8] tag](str': Pointer[U8] tag)
// use @g_strdup_printf[Pointer[U8] tag](format': Pointer[U8] tag, ...)
// use @g_strdup_vprintf[Pointer[U8] tag](format': Pointer[U8] tag, args': valisttagT)
// use @g_strdupv[Pointer[Pointer[U8]] tag](str_array': Pointer[Pointer[U8]] tag)
// use @g_strerror[Pointer[U8] tag](errnum': I32)
// use @g_strescape[Pointer[U8] tag](source': Pointer[U8] tag, exceptions': Pointer[U8] tag)
// use @g_strfreev[None](str_array': Pointer[Pointer[U8]] tag)
// use @g_string_new[GStringT](init': Pointer[U8] tag)
// use @g_string_new_len[GStringT](init': Pointer[U8] tag, len': I64)
// use @g_string_sized_new[GStringT](dfl_size': U64)
// use @g_strip_context[Pointer[U8] tag](msgid': Pointer[U8] tag, msgval': Pointer[U8] tag)
// use @g_strjoin[Pointer[U8] tag](separator': Pointer[U8] tag, ...)
// use @g_strjoinv[Pointer[U8] tag](separator': Pointer[U8] tag, str_array': Pointer[Pointer[U8]] tag)
// use @g_strlcat[U64](dest': Pointer[U8] tag, src': Pointer[U8] tag, dest_size': U64)
// use @g_strlcpy[U64](dest': Pointer[U8] tag, src': Pointer[U8] tag, dest_size': U64)
// use @g_strncasecmp[I32](s1': Pointer[U8] tag, s2': Pointer[U8] tag, n': U32)
// use @g_strndup[Pointer[U8] tag](str': Pointer[U8] tag, n': U64)
// use @g_strnfill[Pointer[U8] tag](length': U64, fill_char': U8)
// use @g_strreverse[Pointer[U8] tag](string': Pointer[U8] tag)
// use @g_strrstr[Pointer[U8] tag](haystack': Pointer[U8] tag, needle': Pointer[U8] tag)
// use @g_strrstr_len[Pointer[U8] tag](haystack': Pointer[U8] tag, haystack_len': I64, needle': Pointer[U8] tag)
// use @g_strsignal[Pointer[U8] tag](signum': I32)
// use @g_strsplit[Pointer[Pointer[U8]] tag](string': Pointer[U8] tag, delimiter': Pointer[U8] tag, max_tokens': I32)
// use @g_strsplit_set[Pointer[Pointer[U8]] tag](string': Pointer[U8] tag, delimiters': Pointer[U8] tag, max_tokens': I32)
// use @g_strstr_len[Pointer[U8] tag](haystack': Pointer[U8] tag, haystack_len': I64, needle': Pointer[U8] tag)
// use @g_strtod[F64](nptr': Pointer[U8] tag, endptr': Pointer[Pointer[U8]] tag)
// use @g_strup[Pointer[U8] tag](string': Pointer[U8] tag)
// use @g_strv_contains[I32](strv': Pointer[Pointer[U8]] tag, str': Pointer[U8] tag)
// use @g_strv_equal[I32](strv1': Pointer[Pointer[U8]] tag, strv2': Pointer[Pointer[U8]] tag)
// use @g_strv_get_type[U64]()
// use @g_strv_length[U32](str_array': Pointer[Pointer[U8]] tag)
// use @g_test_add_data_func[None](testpath': Pointer[U8] tag, test_data': Pointer[None] tag, test_func': GTestDataFunc)
// use @g_test_add_data_func_full[None](testpath': Pointer[U8] tag, test_data': Pointer[None] tag, test_func': GTestDataFunc, data_free_func': GDestroyNotify)
// use @g_test_add_func[None](testpath': Pointer[U8] tag, test_func': GTestFunc)
// use @g_test_add_vtable[None](testpath': Pointer[U8] tag, data_size': U64, test_data': Pointer[None] tag, data_setup': GTestFixtureFunc, data_test': GTestFixtureFunc, data_teardown': GTestFixtureFunc)
// use @g_test_assert_expected_messages_internal[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag)
// use @g_test_bug[None](bug_uri_snippet': Pointer[U8] tag)
// use @g_test_bug_base[None](uri_pattern': Pointer[U8] tag)
// use @g_test_build_filename[Pointer[U8] tag](file_type': U32, first_path': Pointer[U8] tag, ...)
// use @g_test_create_case[GTestCaseT](test_name': Pointer[U8] tag, data_size': U64, test_data': Pointer[None] tag, data_setup': GTestFixtureFunc, data_test': GTestFixtureFunc, data_teardown': GTestFixtureFunc)
// use @g_test_create_suite[GTestSuiteT](suite_name': Pointer[U8] tag)
// use @g_test_expect_message[None](log_domain': Pointer[U8] tag, log_level': I32, pattern': Pointer[U8] tag)
// use @g_test_fail[None]()
// use @g_test_failed[I32]()
// use @g_test_get_dir[Pointer[U8] tag](file_type': U32)
// use @g_test_get_filename[Pointer[U8] tag](file_type': U32, first_path': Pointer[U8] tag, ...)
// use @g_test_get_root[GTestSuiteT]()
// use @g_test_incomplete[None](msg': Pointer[U8] tag)
// use @g_test_init[None](argc': Pointer[I32] tag, argv': Pointer[Pointer[Pointer[U8]]] tag, ...)
// use @g_test_log_set_fatal_handler[None](log_func': GTestLogFatalFunc, user_data': Pointer[None] tag)
// use @g_test_log_type_name[Pointer[U8] tag](log_type': U32)
// use @g_test_maximized_result[None](maximized_quantity': F64, format': Pointer[U8] tag, ...)
// use @g_test_message[None](format': Pointer[U8] tag, ...)
// use @g_test_minimized_result[None](minimized_quantity': F64, format': Pointer[U8] tag, ...)
// use @g_test_queue_destroy[None](destroy_func': GDestroyNotify, destroy_data': Pointer[None] tag)
// use @g_test_queue_free[None](gfree_pointer': Pointer[None] tag)
// use @g_test_rand_double[F64]()
// use @g_test_rand_double_range[F64](range_start': F64, range_end': F64)
// use @g_test_rand_int[I32]()
// use @g_test_rand_int_range[I32](begin': I32, end': I32)
// use @g_test_run[I32]()
// use @g_test_run_suite[I32](suite': GTestSuiteT)
// use @g_test_set_nonfatal_assertions[None]()
// use @g_test_skip[None](msg': Pointer[U8] tag)
// use @g_test_subprocess[I32]()
// use @g_test_summary[None](summary': Pointer[U8] tag)
// use @g_test_timer_elapsed[F64]()
// use @g_test_timer_last[F64]()
// use @g_test_timer_start[None]()
// use @g_test_trap_assertions[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, assertion_flags': U64, pattern': Pointer[U8] tag)
// use @g_test_trap_fork[I32](usec_timeout': U64, test_trap_flags': U32)
// use @g_test_trap_has_passed[I32]()
// use @g_test_trap_reached_timeout[I32]()
// use @g_test_trap_subprocess[None](test_path': Pointer[U8] tag, usec_timeout': U64, test_flags': U32)
// use @g_timeout_add[U32](interval': U32, function': GSourceFunc, data': Pointer[None] tag)
// use @g_timeout_add_full[U32](priority': I32, interval': U32, function': GSourceFunc, data': Pointer[None] tag, notify': GDestroyNotify)
// use @g_timeout_add_seconds[U32](interval': U32, function': GSourceFunc, data': Pointer[None] tag)
// use @g_timeout_add_seconds_full[U32](priority': I32, interval': U32, function': GSourceFunc, data': Pointer[None] tag, notify': GDestroyNotify)
// use @g_timeout_source_new[GSourceT](interval': U32)
// use @g_timeout_source_new_seconds[GSourceT](interval': U32)
// use @g_try_malloc[Pointer[None] tag](n_bytes': U64)
// use @g_try_malloc0[Pointer[None] tag](n_bytes': U64)
// use @g_try_malloc0_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
// use @g_try_malloc_n[Pointer[None] tag](n_blocks': U64, n_block_bytes': U64)
// use @g_try_realloc[Pointer[None] tag](mem': Pointer[None] tag, n_bytes': U64)
// use @g_try_realloc_n[Pointer[None] tag](mem': Pointer[None] tag, n_blocks': U64, n_block_bytes': U64)
// use @g_ucs4_to_utf16[Pointer[U16] tag](str': Pointer[U32] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
// use @g_ucs4_to_utf8[Pointer[U8] tag](str': Pointer[U32] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
// use @g_unichar_break_type[U32](c': U32)
// use @g_unichar_combining_class[I32](uc': U32)
// use @g_unichar_compose[I32](a': U32, b': U32, ch': Pointer[U32] tag)
// use @g_unichar_decompose[I32](ch': U32, a': Pointer[U32] tag, b': Pointer[U32] tag)
// use @g_unichar_digit_value[I32](c': U32)
// use @g_unichar_fully_decompose[U64](ch': U32, compat': I32, result': Pointer[U32] tag, result_len': U64)
// use @g_unichar_get_mirror_char[I32](ch': U32, mirrored_ch': Pointer[U32] tag)
// use @g_unichar_get_script[I32](ch': U32)
// use @g_unichar_isalnum[I32](c': U32)
// use @g_unichar_isalpha[I32](c': U32)
// use @g_unichar_iscntrl[I32](c': U32)
// use @g_unichar_isdefined[I32](c': U32)
// use @g_unichar_isdigit[I32](c': U32)
// use @g_unichar_isgraph[I32](c': U32)
// use @g_unichar_islower[I32](c': U32)
// use @g_unichar_ismark[I32](c': U32)
// use @g_unichar_isprint[I32](c': U32)
// use @g_unichar_ispunct[I32](c': U32)
// use @g_unichar_isspace[I32](c': U32)
// use @g_unichar_istitle[I32](c': U32)
// use @g_unichar_isupper[I32](c': U32)
// use @g_unichar_iswide[I32](c': U32)
// use @g_unichar_iswide_cjk[I32](c': U32)
// use @g_unichar_isxdigit[I32](c': U32)
// use @g_unichar_iszerowidth[I32](c': U32)
// use @g_unichar_to_utf8[I32](c': U32, outbuf': Pointer[U8] tag)
// use @g_unichar_tolower[U32](c': U32)
// use @g_unichar_totitle[U32](c': U32)
// use @g_unichar_toupper[U32](c': U32)
// use @g_unichar_type[U32](c': U32)
// use @g_unichar_validate[I32](ch': U32)
// use @g_unichar_xdigit_value[I32](c': U32)
// use @g_unicode_canonical_ordering[None](string': Pointer[U32] tag, len': U64)
// use @g_unicode_script_from_iso15924[I32](iso15924': U32)
// use @g_unicode_script_to_iso15924[U32](script': I32)
// use @g_unsetenv[None](variable': Pointer[U8] tag)
// use @g_usleep[None](microseconds': U64)
// use @g_utf16_to_ucs4[Pointer[U32] tag](str': Pointer[U16] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
// use @g_utf16_to_utf8[Pointer[U8] tag](str': Pointer[U16] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
// use @g_utf8_casefold[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_utf8_collate[I32](str1': Pointer[U8] tag, str2': Pointer[U8] tag)
// use @g_utf8_collate_key[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_utf8_collate_key_for_filename[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_utf8_find_next_char[Pointer[U8] tag](p': Pointer[U8] tag, end': Pointer[U8] tag)
// use @g_utf8_find_prev_char[Pointer[U8] tag](str': Pointer[U8] tag, p': Pointer[U8] tag)
// use @g_utf8_get_char[U32](p': Pointer[U8] tag)
// use @g_utf8_get_char_validated[U32](p': Pointer[U8] tag, max_len': I64)
// use @g_utf8_make_valid[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_utf8_normalize[Pointer[U8] tag](str': Pointer[U8] tag, len': I64, mode': U32)
// use @g_utf8_offset_to_pointer[Pointer[U8] tag](str': Pointer[U8] tag, offset': I64)
// use @g_utf8_pointer_to_offset[I64](str': Pointer[U8] tag, pos': Pointer[U8] tag)
// use @g_utf8_prev_char[Pointer[U8] tag](p': Pointer[U8] tag)
// use @g_utf8_strchr[Pointer[U8] tag](p': Pointer[U8] tag, len': I64, c': U32)
// use @g_utf8_strdown[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_utf8_strlen[I64](p': Pointer[U8] tag, max': I64)
// use @g_utf8_strncpy[Pointer[U8] tag](dest': Pointer[U8] tag, src': Pointer[U8] tag, n': U64)
// use @g_utf8_strrchr[Pointer[U8] tag](p': Pointer[U8] tag, len': I64, c': U32)
// use @g_utf8_strreverse[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_utf8_strup[Pointer[U8] tag](str': Pointer[U8] tag, len': I64)
// use @g_utf8_substring[Pointer[U8] tag](str': Pointer[U8] tag, start_pos': I64, end_pos': I64)
// use @g_utf8_to_ucs4[Pointer[U32] tag](str': Pointer[U8] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
// use @g_utf8_to_ucs4_fast[Pointer[U32] tag](str': Pointer[U8] tag, len': I64, items_written': Pointer[I64] tag)
// use @g_utf8_to_utf16[Pointer[U16] tag](str': Pointer[U8] tag, len': I64, items_read': Pointer[I64] tag, items_written': Pointer[I64] tag, error': Pointer[GErrorT])
// use @g_utf8_validate[I32](str': Pointer[U8] tag, max_len': I64, end': Pointer[Pointer[U8]] tag)
// use @g_utf8_validate_len[I32](str': Pointer[U8] tag, max_len': U64, end': Pointer[Pointer[U8]] tag)
// use @g_uuid_string_is_valid[I32](str': Pointer[U8] tag)
// use @g_variant_get_gtype[U64]()
// use @g_vsnprintf[I32](string': Pointer[U8] tag, n': U64, format': Pointer[U8] tag, args': valisttagT)
// use @g_warn_message[None](domain': Pointer[U8] tag, file': Pointer[U8] tag, line': I32, func': Pointer[U8] tag, warnexpr': Pointer[U8] tag)
